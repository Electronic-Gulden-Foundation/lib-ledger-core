// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_public_key_provider.djinni

#include "NJSEthereumPublicKeyProvider.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSEthereumPublicKeyProvider::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSEthereumPublicKeyProvider::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSEthereumPublicKeyProvider>(info[0]->ToObject());
    djinni::js::ObjectWrapper<NJSEthereumPublicKeyProvider>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}

void NJSEthereumPublicKeyProvider::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSEthereumPublicKeyProvider::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked());

    //Add template to target
    target->Set(Nan::New<String>("NJSEthereumPublicKeyProvider").ToLocalChecked(), func_template->GetFunction());
}
