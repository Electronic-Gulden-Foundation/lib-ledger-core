// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/currency.proto

#ifndef PROTOBUF_INCLUDED_bitcoin_2fcurrency_2eproto
#define PROTOBUF_INCLUDED_bitcoin_2fcurrency_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/currency.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcurrency_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bitcoin_2fcurrency_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bitcoin_2fcurrency_2eproto();
namespace ledger {
namespace core {
namespace bitcoin {
class Currency;
class CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
}  // namespace bitcoin
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> ::ledger::core::bitcoin::Currency* Arena::CreateMaybeMessage<::ledger::core::bitcoin::Currency>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ledger {
namespace core {
namespace bitcoin {

// ===================================================================

class Currency :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.bitcoin.Currency) */ {
 public:
  Currency();
  virtual ~Currency();

  Currency(const Currency& from);

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(Currency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Currency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Currency* other);
  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const final {
    return CreateMaybeMessage<Currency>(nullptr);
  }

  Currency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Currency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Currency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ledger.core.Currency general = 1;
  bool has_general() const;
  void clear_general();
  static const int kGeneralFieldNumber = 1;
  const ::ledger::core::Currency& general() const;
  ::ledger::core::Currency* release_general();
  ::ledger::core::Currency* mutable_general();
  void set_allocated_general(::ledger::core::Currency* general);

  // uint32 bip44_coin_type = 2;
  void clear_bip44_coin_type();
  static const int kBip44CoinTypeFieldNumber = 2;
  ::google::protobuf::uint32 bip44_coin_type() const;
  void set_bip44_coin_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ledger.core.bitcoin.Currency)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ledger::core::Currency* general_;
  ::google::protobuf::uint32 bip44_coin_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bitcoin_2fcurrency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Currency

// .ledger.core.Currency general = 1;
inline bool Currency::has_general() const {
  return this != internal_default_instance() && general_ != nullptr;
}
inline const ::ledger::core::Currency& Currency::general() const {
  const ::ledger::core::Currency* p = general_;
  // @@protoc_insertion_point(field_get:ledger.core.bitcoin.Currency.general)
  return p != nullptr ? *p : *reinterpret_cast<const ::ledger::core::Currency*>(
      &::ledger::core::_Currency_default_instance_);
}
inline ::ledger::core::Currency* Currency::release_general() {
  // @@protoc_insertion_point(field_release:ledger.core.bitcoin.Currency.general)
  
  ::ledger::core::Currency* temp = general_;
  general_ = nullptr;
  return temp;
}
inline ::ledger::core::Currency* Currency::mutable_general() {
  
  if (general_ == nullptr) {
    auto* p = CreateMaybeMessage<::ledger::core::Currency>(GetArenaNoVirtual());
    general_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ledger.core.bitcoin.Currency.general)
  return general_;
}
inline void Currency::set_allocated_general(::ledger::core::Currency* general) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(general_);
  }
  if (general) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      general = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, general, submessage_arena);
    }
    
  } else {
    
  }
  general_ = general;
  // @@protoc_insertion_point(field_set_allocated:ledger.core.bitcoin.Currency.general)
}

// uint32 bip44_coin_type = 2;
inline void Currency::clear_bip44_coin_type() {
  bip44_coin_type_ = 0u;
}
inline ::google::protobuf::uint32 Currency::bip44_coin_type() const {
  // @@protoc_insertion_point(field_get:ledger.core.bitcoin.Currency.bip44_coin_type)
  return bip44_coin_type_;
}
inline void Currency::set_bip44_coin_type(::google::protobuf::uint32 value) {
  
  bip44_coin_type_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.bitcoin.Currency.bip44_coin_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bitcoin
}  // namespace core
}  // namespace ledger

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bitcoin_2fcurrency_2eproto
