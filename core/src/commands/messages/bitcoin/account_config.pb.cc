// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/account_config.proto

#include "bitcoin/account_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2famount_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Amount_common_2famount_2eproto;
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
class LedgerExplorerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LedgerExplorerConfig> _instance;
} _LedgerExplorerConfig_default_instance_;
class AccountSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountSettings> _instance;
} _AccountSettings_default_instance_;
class AccountConfigurationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccountConfiguration> _instance;
} _AccountConfiguration_default_instance_;
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
static void InitDefaultsLedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_LedgerExplorerConfig_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::LedgerExplorerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::LedgerExplorerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto}, {}};

static void InitDefaultsAccountSettings_bitcoin_2faccount_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_AccountSettings_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::AccountSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::AccountSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAccountSettings_bitcoin_2faccount_5fconfig_2eproto}, {
      &scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto.base,
      &scc_info_Amount_common_2famount_2eproto.base,}};

static void InitDefaultsAccountConfiguration_bitcoin_2faccount_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_AccountConfiguration_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::AccountConfiguration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::AccountConfiguration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAccountConfiguration_bitcoin_2faccount_5fconfig_2eproto}, {
      &scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto.base,}};

void InitDefaults_bitcoin_2faccount_5fconfig_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_bitcoin_2faccount_5fconfig_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_bitcoin_2faccount_5fconfig_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_bitcoin_2faccount_5fconfig_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_bitcoin_2faccount_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, version_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, endpoint_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountSettings, name_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountSettings, explorer_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountSettings, trust_level_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountSettings, dust_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountConfiguration, keychain_engine_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountConfiguration, xpub_path_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::AccountConfiguration, setting_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ledger::core::message::bitcoin::LedgerExplorerConfig)},
  { 8, -1, sizeof(::ledger::core::message::bitcoin::AccountSettings)},
  { 17, -1, sizeof(::ledger::core::message::bitcoin::AccountConfiguration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_LedgerExplorerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_AccountSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_AccountConfiguration_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto = {
  {}, AddDescriptors_bitcoin_2faccount_5fconfig_2eproto, "bitcoin/account_config.proto", schemas,
  file_default_instances, TableStruct_bitcoin_2faccount_5fconfig_2eproto::offsets,
  file_level_metadata_bitcoin_2faccount_5fconfig_2eproto, 3, file_level_enum_descriptors_bitcoin_2faccount_5fconfig_2eproto, file_level_service_descriptors_bitcoin_2faccount_5fconfig_2eproto,
};

const char descriptor_table_protodef_bitcoin_2faccount_5fconfig_2eproto[] =
  "\n\034bitcoin/account_config.proto\022\033ledger.c"
  "ore.message.bitcoin\032\023common/amount.proto"
  "\"G\n\024LedgerExplorerConfig\022\017\n\007version\030\001 \001("
  "\r\022\020\n\010endpoint\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\"\265\001\n\017Ac"
  "countSettings\022\014\n\004name\030\001 \001(\t\022C\n\010explorer\030"
  "\002 \001(\01321.ledger.core.message.bitcoin.Ledg"
  "erExplorerConfig\022\023\n\013trust_level\030\003 \001(\r\022:\n"
  "\016dust_threshold\030\004 \001(\0132\".ledger.core.mess"
  "age.common.Amount\"\256\001\n\024AccountConfigurati"
  "on\022D\n\017keychain_engine\030\001 \001(\0162+.ledger.cor"
  "e.message.bitcoin.KeychainEngine\022\021\n\txpub"
  "_path\030\002 \001(\t\022=\n\007setting\030\003 \001(\0132,.ledger.co"
  "re.message.bitcoin.AccountSettings*V\n\016Ke"
  "ychainEngine\022\017\n\013BIP32_P2PKH\020\000\022\016\n\nBIP49_P"
  "2SH\020\001\022\021\n\rBIP173_P2WPKH\020\002\022\020\n\014BIP173_P2WSH"
  "\020\003b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_bitcoin_2faccount_5fconfig_2eproto = {
  false, InitDefaults_bitcoin_2faccount_5fconfig_2eproto, 
  descriptor_table_protodef_bitcoin_2faccount_5fconfig_2eproto,
  "bitcoin/account_config.proto", &assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto, 610,
};

void AddDescriptors_bitcoin_2faccount_5fconfig_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_common_2famount_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_bitcoin_2faccount_5fconfig_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bitcoin_2faccount_5fconfig_2eproto = []() { AddDescriptors_bitcoin_2faccount_5fconfig_2eproto(); return true; }();
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
const ::google::protobuf::EnumDescriptor* KeychainEngine_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto);
  return file_level_enum_descriptors_bitcoin_2faccount_5fconfig_2eproto[0];
}
bool KeychainEngine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LedgerExplorerConfig::InitAsDefaultInstance() {
}
class LedgerExplorerConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerExplorerConfig::kVersionFieldNumber;
const int LedgerExplorerConfig::kEndpointFieldNumber;
const int LedgerExplorerConfig::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerExplorerConfig::LedgerExplorerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
}
LedgerExplorerConfig::LedgerExplorerConfig(const LedgerExplorerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.endpoint().size() > 0) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
}

void LedgerExplorerConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto.base);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(port_));
}

LedgerExplorerConfig::~LedgerExplorerConfig() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
  SharedDtor();
}

void LedgerExplorerConfig::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LedgerExplorerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerExplorerConfig& LedgerExplorerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LedgerExplorerConfig_bitcoin_2faccount_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LedgerExplorerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerExplorerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LedgerExplorerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string endpoint = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
        object = msg->mutable_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerExplorerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerExplorerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.LedgerExplorerConfig)
}

::google::protobuf::uint8* LedgerExplorerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return target;
}

size_t LedgerExplorerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerExplorerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerExplorerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<LedgerExplorerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.LedgerExplorerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.LedgerExplorerConfig)
    MergeFrom(*source);
  }
}

void LedgerExplorerConfig::MergeFrom(const LedgerExplorerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void LedgerExplorerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerExplorerConfig::CopyFrom(const LedgerExplorerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerExplorerConfig::IsInitialized() const {
  return true;
}

void LedgerExplorerConfig::Swap(LedgerExplorerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerExplorerConfig::InternalSwap(LedgerExplorerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata LedgerExplorerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto);
  return ::file_level_metadata_bitcoin_2faccount_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AccountSettings::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_AccountSettings_default_instance_._instance.get_mutable()->explorer_ = const_cast< ::ledger::core::message::bitcoin::LedgerExplorerConfig*>(
      ::ledger::core::message::bitcoin::LedgerExplorerConfig::internal_default_instance());
  ::ledger::core::message::bitcoin::_AccountSettings_default_instance_._instance.get_mutable()->dust_threshold_ = const_cast< ::ledger::core::message::common::Amount*>(
      ::ledger::core::message::common::Amount::internal_default_instance());
}
class AccountSettings::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::LedgerExplorerConfig& explorer(const AccountSettings* msg);
  static const ::ledger::core::message::common::Amount& dust_threshold(const AccountSettings* msg);
};

const ::ledger::core::message::bitcoin::LedgerExplorerConfig&
AccountSettings::HasBitSetters::explorer(const AccountSettings* msg) {
  return *msg->explorer_;
}
const ::ledger::core::message::common::Amount&
AccountSettings::HasBitSetters::dust_threshold(const AccountSettings* msg) {
  return *msg->dust_threshold_;
}
void AccountSettings::clear_dust_threshold() {
  if (GetArenaNoVirtual() == nullptr && dust_threshold_ != nullptr) {
    delete dust_threshold_;
  }
  dust_threshold_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountSettings::kNameFieldNumber;
const int AccountSettings::kExplorerFieldNumber;
const int AccountSettings::kTrustLevelFieldNumber;
const int AccountSettings::kDustThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountSettings::AccountSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.AccountSettings)
}
AccountSettings::AccountSettings(const AccountSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_explorer()) {
    explorer_ = new ::ledger::core::message::bitcoin::LedgerExplorerConfig(*from.explorer_);
  } else {
    explorer_ = nullptr;
  }
  if (from.has_dust_threshold()) {
    dust_threshold_ = new ::ledger::core::message::common::Amount(*from.dust_threshold_);
  } else {
    dust_threshold_ = nullptr;
  }
  trust_level_ = from.trust_level_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.AccountSettings)
}

void AccountSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&explorer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trust_level_) -
      reinterpret_cast<char*>(&explorer_)) + sizeof(trust_level_));
}

AccountSettings::~AccountSettings() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.AccountSettings)
  SharedDtor();
}

void AccountSettings::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete explorer_;
  if (this != internal_default_instance()) delete dust_threshold_;
}

void AccountSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountSettings& AccountSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AccountSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.AccountSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && explorer_ != nullptr) {
    delete explorer_;
  }
  explorer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dust_threshold_ != nullptr) {
    delete dust_threshold_;
  }
  dust_threshold_ = nullptr;
  trust_level_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AccountSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.AccountSettings.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::LedgerExplorerConfig::_InternalParse;
        object = msg->mutable_explorer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 trust_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_trust_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ledger.core.message.common.Amount dust_threshold = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::common::Amount::_InternalParse;
        object = msg->mutable_dust_threshold();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.AccountSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.AccountSettings.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explorer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trust_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trust_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.common.Amount dust_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dust_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.AccountSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.AccountSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.AccountSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.AccountSettings.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::explorer(this), output);
  }

  // uint32 trust_level = 3;
  if (this->trust_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trust_level(), output);
  }

  // .ledger.core.message.common.Amount dust_threshold = 4;
  if (this->has_dust_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dust_threshold(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.AccountSettings)
}

::google::protobuf::uint8* AccountSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.AccountSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.AccountSettings.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::explorer(this), target);
  }

  // uint32 trust_level = 3;
  if (this->trust_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trust_level(), target);
  }

  // .ledger.core.message.common.Amount dust_threshold = 4;
  if (this->has_dust_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dust_threshold(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.AccountSettings)
  return target;
}

size_t AccountSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.AccountSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *explorer_);
  }

  // .ledger.core.message.common.Amount dust_threshold = 4;
  if (this->has_dust_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dust_threshold_);
  }

  // uint32 trust_level = 3;
  if (this->trust_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trust_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.AccountSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountSettings* source =
      ::google::protobuf::DynamicCastToGenerated<AccountSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.AccountSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.AccountSettings)
    MergeFrom(*source);
  }
}

void AccountSettings::MergeFrom(const AccountSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.AccountSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_explorer()) {
    mutable_explorer()->::ledger::core::message::bitcoin::LedgerExplorerConfig::MergeFrom(from.explorer());
  }
  if (from.has_dust_threshold()) {
    mutable_dust_threshold()->::ledger::core::message::common::Amount::MergeFrom(from.dust_threshold());
  }
  if (from.trust_level() != 0) {
    set_trust_level(from.trust_level());
  }
}

void AccountSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.AccountSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountSettings::CopyFrom(const AccountSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.AccountSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountSettings::IsInitialized() const {
  return true;
}

void AccountSettings::Swap(AccountSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountSettings::InternalSwap(AccountSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(explorer_, other->explorer_);
  swap(dust_threshold_, other->dust_threshold_);
  swap(trust_level_, other->trust_level_);
}

::google::protobuf::Metadata AccountSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto);
  return ::file_level_metadata_bitcoin_2faccount_5fconfig_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AccountConfiguration::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_AccountConfiguration_default_instance_._instance.get_mutable()->setting_ = const_cast< ::ledger::core::message::bitcoin::AccountSettings*>(
      ::ledger::core::message::bitcoin::AccountSettings::internal_default_instance());
}
class AccountConfiguration::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountSettings& setting(const AccountConfiguration* msg);
};

const ::ledger::core::message::bitcoin::AccountSettings&
AccountConfiguration::HasBitSetters::setting(const AccountConfiguration* msg) {
  return *msg->setting_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountConfiguration::kKeychainEngineFieldNumber;
const int AccountConfiguration::kXpubPathFieldNumber;
const int AccountConfiguration::kSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountConfiguration::AccountConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.AccountConfiguration)
}
AccountConfiguration::AccountConfiguration(const AccountConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xpub_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xpub_path().size() > 0) {
    xpub_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xpub_path_);
  }
  if (from.has_setting()) {
    setting_ = new ::ledger::core::message::bitcoin::AccountSettings(*from.setting_);
  } else {
    setting_ = nullptr;
  }
  keychain_engine_ = from.keychain_engine_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.AccountConfiguration)
}

void AccountConfiguration::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto.base);
  xpub_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keychain_engine_) -
      reinterpret_cast<char*>(&setting_)) + sizeof(keychain_engine_));
}

AccountConfiguration::~AccountConfiguration() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.AccountConfiguration)
  SharedDtor();
}

void AccountConfiguration::SharedDtor() {
  xpub_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete setting_;
}

void AccountConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountConfiguration& AccountConfiguration::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AccountConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.AccountConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpub_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && setting_ != nullptr) {
    delete setting_;
  }
  setting_ = nullptr;
  keychain_engine_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountConfiguration::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AccountConfiguration*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_keychain_engine(static_cast<::ledger::core::message::bitcoin::KeychainEngine>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string xpub_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.AccountConfiguration.xpub_path");
        object = msg->mutable_xpub_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ledger.core.message.bitcoin.AccountSettings setting = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountSettings::_InternalParse;
        object = msg->mutable_setting();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.AccountConfiguration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_keychain_engine(static_cast< ::ledger::core::message::bitcoin::KeychainEngine >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string xpub_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpub_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xpub_path().data(), static_cast<int>(this->xpub_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.AccountConfiguration.xpub_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.AccountSettings setting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.AccountConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.AccountConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.AccountConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 1;
  if (this->keychain_engine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->keychain_engine(), output);
  }

  // string xpub_path = 2;
  if (this->xpub_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub_path().data(), static_cast<int>(this->xpub_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.AccountConfiguration.xpub_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xpub_path(), output);
  }

  // .ledger.core.message.bitcoin.AccountSettings setting = 3;
  if (this->has_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::setting(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.AccountConfiguration)
}

::google::protobuf::uint8* AccountConfiguration::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.AccountConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 1;
  if (this->keychain_engine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->keychain_engine(), target);
  }

  // string xpub_path = 2;
  if (this->xpub_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub_path().data(), static_cast<int>(this->xpub_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.AccountConfiguration.xpub_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xpub_path(), target);
  }

  // .ledger.core.message.bitcoin.AccountSettings setting = 3;
  if (this->has_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::setting(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.AccountConfiguration)
  return target;
}

size_t AccountConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.AccountConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string xpub_path = 2;
  if (this->xpub_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xpub_path());
  }

  // .ledger.core.message.bitcoin.AccountSettings setting = 3;
  if (this->has_setting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *setting_);
  }

  // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 1;
  if (this->keychain_engine() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->keychain_engine());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.AccountConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountConfiguration* source =
      ::google::protobuf::DynamicCastToGenerated<AccountConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.AccountConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.AccountConfiguration)
    MergeFrom(*source);
  }
}

void AccountConfiguration::MergeFrom(const AccountConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.AccountConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpub_path().size() > 0) {

    xpub_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xpub_path_);
  }
  if (from.has_setting()) {
    mutable_setting()->::ledger::core::message::bitcoin::AccountSettings::MergeFrom(from.setting());
  }
  if (from.keychain_engine() != 0) {
    set_keychain_engine(from.keychain_engine());
  }
}

void AccountConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.AccountConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountConfiguration::CopyFrom(const AccountConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.AccountConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountConfiguration::IsInitialized() const {
  return true;
}

void AccountConfiguration::Swap(AccountConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountConfiguration::InternalSwap(AccountConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  xpub_path_.Swap(&other->xpub_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(setting_, other->setting_);
  swap(keychain_engine_, other->keychain_engine_);
}

::google::protobuf::Metadata AccountConfiguration::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2faccount_5fconfig_2eproto);
  return ::file_level_metadata_bitcoin_2faccount_5fconfig_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::LedgerExplorerConfig* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::LedgerExplorerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::LedgerExplorerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::AccountSettings* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::AccountSettings >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::AccountSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::AccountConfiguration* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::AccountConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::AccountConfiguration >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
