// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/account.proto

#ifndef PROTOBUF_INCLUDED_bitcoin_2faccount_2eproto
#define PROTOBUF_INCLUDED_bitcoin_2faccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bitcoin_2faccount_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bitcoin_2faccount_2eproto();
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
class AccountID;
class AccountIDDefaultTypeInternal;
extern AccountIDDefaultTypeInternal _AccountID_default_instance_;
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> ::ledger::core::message::bitcoin::AccountID* Arena::CreateMaybeMessage<::ledger::core::message::bitcoin::AccountID>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {

enum KeychainEngine {
  BIP32_P2PKH = 0,
  BIP49_P2SH = 1,
  BIP173_P2WPKH = 2,
  BIP173_P2WSH = 3,
  KeychainEngine_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  KeychainEngine_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool KeychainEngine_IsValid(int value);
const KeychainEngine KeychainEngine_MIN = BIP32_P2PKH;
const KeychainEngine KeychainEngine_MAX = BIP173_P2WSH;
const int KeychainEngine_ARRAYSIZE = KeychainEngine_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeychainEngine_descriptor();
inline const ::std::string& KeychainEngine_Name(KeychainEngine value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeychainEngine_descriptor(), value);
}
inline bool KeychainEngine_Parse(
    const ::std::string& name, KeychainEngine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeychainEngine>(
    KeychainEngine_descriptor(), name, value);
}
// ===================================================================

class AccountID :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.message.bitcoin.AccountID) */ {
 public:
  AccountID();
  virtual ~AccountID();

  AccountID(const AccountID& from);

  inline AccountID& operator=(const AccountID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountID(AccountID&& from) noexcept
    : AccountID() {
    *this = ::std::move(from);
  }

  inline AccountID& operator=(AccountID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AccountID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountID* internal_default_instance() {
    return reinterpret_cast<const AccountID*>(
               &_AccountID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AccountID* other);
  friend void swap(AccountID& a, AccountID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountID* New() const final {
    return CreateMaybeMessage<AccountID>(nullptr);
  }

  AccountID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountID& from);
  void MergeFrom(const AccountID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string xpub = 1;
  void clear_xpub();
  static const int kXpubFieldNumber = 1;
  const ::std::string& xpub() const;
  void set_xpub(const ::std::string& value);
  #if LANG_CXX11
  void set_xpub(::std::string&& value);
  #endif
  void set_xpub(const char* value);
  void set_xpub(const char* value, size_t size);
  ::std::string* mutable_xpub();
  ::std::string* release_xpub();
  void set_allocated_xpub(::std::string* xpub);

  // string currency_name = 3;
  void clear_currency_name();
  static const int kCurrencyNameFieldNumber = 3;
  const ::std::string& currency_name() const;
  void set_currency_name(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_name(::std::string&& value);
  #endif
  void set_currency_name(const char* value);
  void set_currency_name(const char* value, size_t size);
  ::std::string* mutable_currency_name();
  ::std::string* release_currency_name();
  void set_allocated_currency_name(::std::string* currency_name);

  // .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 2;
  void clear_keychain_engine();
  static const int kKeychainEngineFieldNumber = 2;
  ::ledger::core::message::bitcoin::KeychainEngine keychain_engine() const;
  void set_keychain_engine(::ledger::core::message::bitcoin::KeychainEngine value);

  // @@protoc_insertion_point(class_scope:ledger.core.message.bitcoin.AccountID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xpub_;
  ::google::protobuf::internal::ArenaStringPtr currency_name_;
  int keychain_engine_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bitcoin_2faccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountID

// string xpub = 1;
inline void AccountID::clear_xpub() {
  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountID::xpub() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.AccountID.xpub)
  return xpub_.GetNoArena();
}
inline void AccountID::set_xpub(const ::std::string& value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.AccountID.xpub)
}
#if LANG_CXX11
inline void AccountID::set_xpub(::std::string&& value) {
  
  xpub_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.bitcoin.AccountID.xpub)
}
#endif
inline void AccountID::set_xpub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.bitcoin.AccountID.xpub)
}
inline void AccountID::set_xpub(const char* value, size_t size) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.bitcoin.AccountID.xpub)
}
inline ::std::string* AccountID::mutable_xpub() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.AccountID.xpub)
  return xpub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountID::release_xpub() {
  // @@protoc_insertion_point(field_release:ledger.core.message.bitcoin.AccountID.xpub)
  
  return xpub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountID::set_allocated_xpub(::std::string* xpub) {
  if (xpub != nullptr) {
    
  } else {
    
  }
  xpub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xpub);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.AccountID.xpub)
}

// .ledger.core.message.bitcoin.KeychainEngine keychain_engine = 2;
inline void AccountID::clear_keychain_engine() {
  keychain_engine_ = 0;
}
inline ::ledger::core::message::bitcoin::KeychainEngine AccountID::keychain_engine() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.AccountID.keychain_engine)
  return static_cast< ::ledger::core::message::bitcoin::KeychainEngine >(keychain_engine_);
}
inline void AccountID::set_keychain_engine(::ledger::core::message::bitcoin::KeychainEngine value) {
  
  keychain_engine_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.AccountID.keychain_engine)
}

// string currency_name = 3;
inline void AccountID::clear_currency_name() {
  currency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountID::currency_name() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.AccountID.currency_name)
  return currency_name_.GetNoArena();
}
inline void AccountID::set_currency_name(const ::std::string& value) {
  
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.AccountID.currency_name)
}
#if LANG_CXX11
inline void AccountID::set_currency_name(::std::string&& value) {
  
  currency_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.bitcoin.AccountID.currency_name)
}
#endif
inline void AccountID::set_currency_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.bitcoin.AccountID.currency_name)
}
inline void AccountID::set_currency_name(const char* value, size_t size) {
  
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.bitcoin.AccountID.currency_name)
}
inline ::std::string* AccountID::mutable_currency_name() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.AccountID.currency_name)
  return currency_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountID::release_currency_name() {
  // @@protoc_insertion_point(field_release:ledger.core.message.bitcoin.AccountID.currency_name)
  
  return currency_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountID::set_allocated_currency_name(::std::string* currency_name) {
  if (currency_name != nullptr) {
    
  } else {
    
  }
  currency_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_name);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.AccountID.currency_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ledger::core::message::bitcoin::KeychainEngine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ledger::core::message::bitcoin::KeychainEngine>() {
  return ::ledger::core::message::bitcoin::KeychainEngine_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bitcoin_2faccount_2eproto
