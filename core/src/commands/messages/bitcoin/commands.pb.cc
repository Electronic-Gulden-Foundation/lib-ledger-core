// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/commands.proto

#include "bitcoin/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Account_bitcoin_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2foperation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Operation_bitcoin_2foperation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fwallet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wallet_bitcoin_2fwallet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2famount_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Amount_common_2famount_2eproto;
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
class GetWalletsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWalletsResponse> _instance;
} _GetWalletsResponse_default_instance_;
class CreateWalletRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateWalletRequest> _instance;
} _CreateWalletRequest_default_instance_;
class CreateWalletResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateWalletResponse> _instance;
} _CreateWalletResponse_default_instance_;
class GetAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAccountsRequest> _instance;
} _GetAccountsRequest_default_instance_;
class GetAccountsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAccountsResponse> _instance;
} _GetAccountsResponse_default_instance_;
class CreateAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateAccountRequest> _instance;
} _CreateAccountRequest_default_instance_;
class CreateAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateAccountResponse> _instance;
} _CreateAccountResponse_default_instance_;
class SyncAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncAccountRequest> _instance;
} _SyncAccountRequest_default_instance_;
class SyncAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncAccountResponse> _instance;
} _SyncAccountResponse_default_instance_;
class GetBalanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceRequest> _instance;
} _GetBalanceRequest_default_instance_;
class GetBalanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceResponse> _instance;
} _GetBalanceResponse_default_instance_;
class GetOperationsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOperationsRequest> _instance;
} _GetOperationsRequest_default_instance_;
class GetOperationsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOperationsResponse> _instance;
} _GetOperationsResponse_default_instance_;
class SetAccountSettingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetAccountSettingsRequest> _instance;
} _SetAccountSettingsRequest_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
static void InitDefaultsGetWalletsResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetWalletsResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetWalletsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetWalletsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetWalletsResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetWalletsResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Wallet_bitcoin_2fwallet_2eproto.base,}};

static void InitDefaultsCreateWalletRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_CreateWalletRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::CreateWalletRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::CreateWalletRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateWalletRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateWalletRequest_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsCreateWalletResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_CreateWalletResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::CreateWalletResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::CreateWalletResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateWalletResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateWalletResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Wallet_bitcoin_2fwallet_2eproto.base,}};

static void InitDefaultsGetAccountsRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetAccountsRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetAccountsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetAccountsRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetAccountsRequest_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsGetAccountsResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetAccountsResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetAccountsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetAccountsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetAccountsResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetAccountsResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Account_bitcoin_2faccount_2eproto.base,}};

static void InitDefaultsCreateAccountRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_CreateAccountRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::CreateAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::CreateAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateAccountRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateAccountRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountConfiguration_bitcoin_2faccount_5fconfig_2eproto.base,}};

static void InitDefaultsCreateAccountResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_CreateAccountResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::CreateAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::CreateAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateAccountResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateAccountResponse_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsSyncAccountRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::SyncAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::SyncAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncAccountRequest_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsSyncAccountResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_SyncAccountResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::SyncAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::SyncAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncAccountResponse_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsGetBalanceRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetBalanceRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetBalanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetBalanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetBalanceRequest_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsGetBalanceResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetBalanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetBalanceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetBalanceResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Amount_common_2famount_2eproto.base,}};

static void InitDefaultsGetOperationsRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetOperationsRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetOperationsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetOperationsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetOperationsRequest_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsGetOperationsResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetOperationsResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetOperationsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetOperationsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetOperationsResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Operation_bitcoin_2foperation_2eproto.base,}};

static void InitDefaultsSetAccountSettingsRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_SetAccountSettingsRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::SetAccountSettingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::SetAccountSettingsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetAccountSettingsRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetAccountSettingsRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountSettings_bitcoin_2faccount_5fconfig_2eproto.base,}};

static void InitDefaultsRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_Request_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Request_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequest_bitcoin_2fcommands_2eproto}, {}};

void InitDefaults_bitcoin_2fcommands_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetWalletsResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateWalletRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateWalletResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAccountsRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAccountsResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateAccountRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateAccountResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetAccountSettingsRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_bitcoin_2fcommands_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_bitcoin_2fcommands_2eproto[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_bitcoin_2fcommands_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_bitcoin_2fcommands_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_bitcoin_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetWalletsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetWalletsResponse, wallets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateWalletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateWalletRequest, name_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateWalletRequest, currency_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateWalletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateWalletResponse, wallet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetAccountsRequest, wallet_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetAccountsResponse, accounts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountRequest, xpub_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountRequest, index_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::CreateAccountResponse, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountRequest, acc_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountResponse, new_acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceRequest, acc_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceResponse, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsRequest, acc_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsResponse, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SetAccountSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SetAccountSettingsRequest, acc_uid_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SetAccountSettingsRequest, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::Request, type_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::Request, submessage_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ledger::core::message::bitcoin::GetWalletsResponse)},
  { 6, -1, sizeof(::ledger::core::message::bitcoin::CreateWalletRequest)},
  { 13, -1, sizeof(::ledger::core::message::bitcoin::CreateWalletResponse)},
  { 19, -1, sizeof(::ledger::core::message::bitcoin::GetAccountsRequest)},
  { 25, -1, sizeof(::ledger::core::message::bitcoin::GetAccountsResponse)},
  { 31, -1, sizeof(::ledger::core::message::bitcoin::CreateAccountRequest)},
  { 39, -1, sizeof(::ledger::core::message::bitcoin::CreateAccountResponse)},
  { 45, -1, sizeof(::ledger::core::message::bitcoin::SyncAccountRequest)},
  { 51, -1, sizeof(::ledger::core::message::bitcoin::SyncAccountResponse)},
  { 57, -1, sizeof(::ledger::core::message::bitcoin::GetBalanceRequest)},
  { 63, -1, sizeof(::ledger::core::message::bitcoin::GetBalanceResponse)},
  { 69, -1, sizeof(::ledger::core::message::bitcoin::GetOperationsRequest)},
  { 75, -1, sizeof(::ledger::core::message::bitcoin::GetOperationsResponse)},
  { 81, -1, sizeof(::ledger::core::message::bitcoin::SetAccountSettingsRequest)},
  { 88, -1, sizeof(::ledger::core::message::bitcoin::Request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetWalletsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_CreateWalletRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_CreateWalletResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_CreateAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_CreateAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_SyncAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetOperationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetOperationsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_SetAccountSettingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_Request_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_bitcoin_2fcommands_2eproto = {
  {}, AddDescriptors_bitcoin_2fcommands_2eproto, "bitcoin/commands.proto", schemas,
  file_default_instances, TableStruct_bitcoin_2fcommands_2eproto::offsets,
  file_level_metadata_bitcoin_2fcommands_2eproto, 15, file_level_enum_descriptors_bitcoin_2fcommands_2eproto, file_level_service_descriptors_bitcoin_2fcommands_2eproto,
};

const char descriptor_table_protodef_bitcoin_2fcommands_2eproto[] =
  "\n\026bitcoin/commands.proto\022\033ledger.core.me"
  "ssage.bitcoin\032\025bitcoin/account.proto\032\034bi"
  "tcoin/account_config.proto\032\024bitcoin/wall"
  "et.proto\032\027bitcoin/operation.proto\032\023commo"
  "n/amount.proto\"J\n\022GetWalletsResponse\0224\n\007"
  "wallets\030\001 \003(\0132#.ledger.core.message.bitc"
  "oin.Wallet\":\n\023CreateWalletRequest\022\014\n\004nam"
  "e\030\001 \001(\t\022\025\n\rcurrency_name\030\002 \001(\t\"K\n\024Create"
  "WalletResponse\0223\n\006wallet\030\001 \001(\0132#.ledger."
  "core.message.bitcoin.Wallet\"(\n\022GetAccoun"
  "tsRequest\022\022\n\nwallet_uid\030\001 \001(\t\"M\n\023GetAcco"
  "untsResponse\0226\n\010accounts\030\001 \003(\0132$.ledger."
  "core.message.bitcoin.Account\"v\n\024CreateAc"
  "countRequest\022\014\n\004xpub\030\001 \001(\t\022\r\n\005index\030\002 \001("
  "\r\022A\n\006config\030\003 \001(\01321.ledger.core.message."
  "bitcoin.AccountConfiguration\"(\n\025CreateAc"
  "countResponse\022\017\n\007Account\030\001 \001(\t\"%\n\022SyncAc"
  "countRequest\022\017\n\007acc_uid\030\001 \001(\t\"&\n\023SyncAcc"
  "ountResponse\022\017\n\007new_acc\030\001 \001(\010\"$\n\021GetBala"
  "nceRequest\022\017\n\007acc_uid\030\001 \001(\t\"H\n\022GetBalanc"
  "eResponse\0222\n\006amount\030\001 \001(\0132\".ledger.core."
  "message.common.Amount\"\'\n\024GetOperationsRe"
  "quest\022\017\n\007acc_uid\030\001 \001(\t\"S\n\025GetOperationsR"
  "esponse\022:\n\noperations\030\001 \003(\0132&.ledger.cor"
  "e.message.bitcoin.Operation\"l\n\031SetAccoun"
  "tSettingsRequest\022\017\n\007acc_uid\030\001 \001(\t\022>\n\010set"
  "tings\030\002 \001(\0132,.ledger.core.message.bitcoi"
  "n.AccountSettings\"U\n\007Request\0226\n\004type\030\001 \001"
  "(\0162(.ledger.core.message.bitcoin.Request"
  "Type\022\022\n\nsubmessage\030\002 \001(\014*\344\001\n\013RequestType"
  "\022\030\n\024SET_ACCOUNT_SETTINGS\020\000\022\027\n\023SET_WALLET"
  "_SETTINGS\020\001\022\031\n\025SET_CURRENCY_SETTINGS\020\002\022\017"
  "\n\013GET_WALLETS\020\003\022\021\n\rCREATE_WALLET\020\004\022\020\n\014GE"
  "T_ACCOUNTS\020\005\022\022\n\016CREATE_ACCOUNT\020\006\022\020\n\014SYNC"
  "_ACCOUNT\020\007\022\027\n\023GET_ACCOUNT_BALANCE\020\010\022\022\n\016G"
  "ET_OPERATIONS\020\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_bitcoin_2fcommands_2eproto = {
  false, InitDefaults_bitcoin_2fcommands_2eproto, 
  descriptor_table_protodef_bitcoin_2fcommands_2eproto,
  "bitcoin/commands.proto", &assign_descriptors_table_bitcoin_2fcommands_2eproto, 1423,
};

void AddDescriptors_bitcoin_2fcommands_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_bitcoin_2faccount_2eproto,
    ::AddDescriptors_bitcoin_2faccount_5fconfig_2eproto,
    ::AddDescriptors_bitcoin_2fwallet_2eproto,
    ::AddDescriptors_bitcoin_2foperation_2eproto,
    ::AddDescriptors_common_2famount_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_bitcoin_2fcommands_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bitcoin_2fcommands_2eproto = []() { AddDescriptors_bitcoin_2fcommands_2eproto(); return true; }();
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return file_level_enum_descriptors_bitcoin_2fcommands_2eproto[0];
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetWalletsResponse::InitAsDefaultInstance() {
}
class GetWalletsResponse::HasBitSetters {
 public:
};

void GetWalletsResponse::clear_wallets() {
  wallets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWalletsResponse::kWalletsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWalletsResponse::GetWalletsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetWalletsResponse)
}
GetWalletsResponse::GetWalletsResponse(const GetWalletsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      wallets_(from.wallets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetWalletsResponse)
}

void GetWalletsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetWalletsResponse_bitcoin_2fcommands_2eproto.base);
}

GetWalletsResponse::~GetWalletsResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetWalletsResponse)
  SharedDtor();
}

void GetWalletsResponse::SharedDtor() {
}

void GetWalletsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetWalletsResponse& GetWalletsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetWalletsResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetWalletsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetWalletsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wallets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetWalletsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetWalletsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ledger.core.message.bitcoin.Wallet wallets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ledger::core::message::bitcoin::Wallet::_InternalParse;
          object = msg->add_wallets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetWalletsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetWalletsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ledger.core.message.bitcoin.Wallet wallets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wallets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetWalletsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetWalletsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetWalletsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetWalletsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Wallet wallets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wallets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->wallets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetWalletsResponse)
}

::google::protobuf::uint8* GetWalletsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetWalletsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Wallet wallets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wallets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->wallets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetWalletsResponse)
  return target;
}

size_t GetWalletsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetWalletsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Wallet wallets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wallets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wallets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWalletsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetWalletsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWalletsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetWalletsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetWalletsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetWalletsResponse)
    MergeFrom(*source);
  }
}

void GetWalletsResponse::MergeFrom(const GetWalletsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetWalletsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wallets_.MergeFrom(from.wallets_);
}

void GetWalletsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetWalletsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWalletsResponse::CopyFrom(const GetWalletsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetWalletsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWalletsResponse::IsInitialized() const {
  return true;
}

void GetWalletsResponse::Swap(GetWalletsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWalletsResponse::InternalSwap(GetWalletsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&wallets_)->InternalSwap(CastToBase(&other->wallets_));
}

::google::protobuf::Metadata GetWalletsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateWalletRequest::InitAsDefaultInstance() {
}
class CreateWalletRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWalletRequest::kNameFieldNumber;
const int CreateWalletRequest::kCurrencyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWalletRequest::CreateWalletRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.CreateWalletRequest)
}
CreateWalletRequest::CreateWalletRequest(const CreateWalletRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_name().size() > 0) {
    currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.CreateWalletRequest)
}

void CreateWalletRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateWalletRequest_bitcoin_2fcommands_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateWalletRequest::~CreateWalletRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.CreateWalletRequest)
  SharedDtor();
}

void CreateWalletRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateWalletRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWalletRequest& CreateWalletRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateWalletRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CreateWalletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.CreateWalletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWalletRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateWalletRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.CreateWalletRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currency_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.CreateWalletRequest.currency_name");
        object = msg->mutable_currency_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWalletRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.CreateWalletRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.CreateWalletRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_name().data(), static_cast<int>(this->currency_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.CreateWalletRequest.currency_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.CreateWalletRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.CreateWalletRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWalletRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.CreateWalletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateWalletRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string currency_name = 2;
  if (this->currency_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_name().data(), static_cast<int>(this->currency_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateWalletRequest.currency_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->currency_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.CreateWalletRequest)
}

::google::protobuf::uint8* CreateWalletRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.CreateWalletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateWalletRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string currency_name = 2;
  if (this->currency_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_name().data(), static_cast<int>(this->currency_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateWalletRequest.currency_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.CreateWalletRequest)
  return target;
}

size_t CreateWalletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.CreateWalletRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string currency_name = 2;
  if (this->currency_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWalletRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateWalletRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.CreateWalletRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.CreateWalletRequest)
    MergeFrom(*source);
  }
}

void CreateWalletRequest::MergeFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.currency_name().size() > 0) {

    currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
  }
}

void CreateWalletRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletRequest::CopyFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletRequest::IsInitialized() const {
  return true;
}

void CreateWalletRequest::Swap(CreateWalletRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateWalletRequest::InternalSwap(CreateWalletRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_name_.Swap(&other->currency_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CreateWalletRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateWalletResponse::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_CreateWalletResponse_default_instance_._instance.get_mutable()->wallet_ = const_cast< ::ledger::core::message::bitcoin::Wallet*>(
      ::ledger::core::message::bitcoin::Wallet::internal_default_instance());
}
class CreateWalletResponse::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::Wallet& wallet(const CreateWalletResponse* msg);
};

const ::ledger::core::message::bitcoin::Wallet&
CreateWalletResponse::HasBitSetters::wallet(const CreateWalletResponse* msg) {
  return *msg->wallet_;
}
void CreateWalletResponse::clear_wallet() {
  if (GetArenaNoVirtual() == nullptr && wallet_ != nullptr) {
    delete wallet_;
  }
  wallet_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWalletResponse::kWalletFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWalletResponse::CreateWalletResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.CreateWalletResponse)
}
CreateWalletResponse::CreateWalletResponse(const CreateWalletResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wallet()) {
    wallet_ = new ::ledger::core::message::bitcoin::Wallet(*from.wallet_);
  } else {
    wallet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.CreateWalletResponse)
}

void CreateWalletResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateWalletResponse_bitcoin_2fcommands_2eproto.base);
  wallet_ = nullptr;
}

CreateWalletResponse::~CreateWalletResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.CreateWalletResponse)
  SharedDtor();
}

void CreateWalletResponse::SharedDtor() {
  if (this != internal_default_instance()) delete wallet_;
}

void CreateWalletResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWalletResponse& CreateWalletResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateWalletResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CreateWalletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.CreateWalletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && wallet_ != nullptr) {
    delete wallet_;
  }
  wallet_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWalletResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateWalletResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.Wallet wallet = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::Wallet::_InternalParse;
        object = msg->mutable_wallet();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWalletResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.CreateWalletResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.Wallet wallet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wallet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.CreateWalletResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.CreateWalletResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWalletResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.CreateWalletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.Wallet wallet = 1;
  if (this->has_wallet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::wallet(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.CreateWalletResponse)
}

::google::protobuf::uint8* CreateWalletResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.CreateWalletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.Wallet wallet = 1;
  if (this->has_wallet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::wallet(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.CreateWalletResponse)
  return target;
}

size_t CreateWalletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.CreateWalletResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.Wallet wallet = 1;
  if (this->has_wallet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wallet_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWalletResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateWalletResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.CreateWalletResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.CreateWalletResponse)
    MergeFrom(*source);
  }
}

void CreateWalletResponse::MergeFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wallet()) {
    mutable_wallet()->::ledger::core::message::bitcoin::Wallet::MergeFrom(from.wallet());
  }
}

void CreateWalletResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletResponse::CopyFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletResponse::IsInitialized() const {
  return true;
}

void CreateWalletResponse::Swap(CreateWalletResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateWalletResponse::InternalSwap(CreateWalletResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(wallet_, other->wallet_);
}

::google::protobuf::Metadata CreateWalletResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAccountsRequest::InitAsDefaultInstance() {
}
class GetAccountsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountsRequest::kWalletUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountsRequest::GetAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetAccountsRequest)
}
GetAccountsRequest::GetAccountsRequest(const GetAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wallet_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wallet_uid().size() > 0) {
    wallet_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wallet_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetAccountsRequest)
}

void GetAccountsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAccountsRequest_bitcoin_2fcommands_2eproto.base);
  wallet_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetAccountsRequest::~GetAccountsRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetAccountsRequest)
  SharedDtor();
}

void GetAccountsRequest::SharedDtor() {
  wallet_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAccountsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsRequest& GetAccountsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAccountsRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wallet_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAccountsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string wallet_uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.GetAccountsRequest.wallet_uid");
        object = msg->mutable_wallet_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetAccountsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string wallet_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wallet_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wallet_uid().data(), static_cast<int>(this->wallet_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.GetAccountsRequest.wallet_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetAccountsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string wallet_uid = 1;
  if (this->wallet_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wallet_uid().data(), static_cast<int>(this->wallet_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetAccountsRequest.wallet_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wallet_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetAccountsRequest)
}

::google::protobuf::uint8* GetAccountsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string wallet_uid = 1;
  if (this->wallet_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wallet_uid().data(), static_cast<int>(this->wallet_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetAccountsRequest.wallet_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wallet_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetAccountsRequest)
  return target;
}

size_t GetAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetAccountsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string wallet_uid = 1;
  if (this->wallet_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wallet_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetAccountsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetAccountsRequest)
    MergeFrom(*source);
  }
}

void GetAccountsRequest::MergeFrom(const GetAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wallet_uid().size() > 0) {

    wallet_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wallet_uid_);
  }
}

void GetAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsRequest::CopyFrom(const GetAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsRequest::IsInitialized() const {
  return true;
}

void GetAccountsRequest::Swap(GetAccountsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountsRequest::InternalSwap(GetAccountsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  wallet_uid_.Swap(&other->wallet_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetAccountsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAccountsResponse::InitAsDefaultInstance() {
}
class GetAccountsResponse::HasBitSetters {
 public:
};

void GetAccountsResponse::clear_accounts() {
  accounts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAccountsResponse::kAccountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAccountsResponse::GetAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetAccountsResponse)
}
GetAccountsResponse::GetAccountsResponse(const GetAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetAccountsResponse)
}

void GetAccountsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAccountsResponse_bitcoin_2fcommands_2eproto.base);
}

GetAccountsResponse::~GetAccountsResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetAccountsResponse)
  SharedDtor();
}

void GetAccountsResponse::SharedDtor() {
}

void GetAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAccountsResponse& GetAccountsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAccountsResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAccountsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAccountsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ledger.core.message.bitcoin.Account accounts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ledger::core::message::bitcoin::Account::_InternalParse;
          object = msg->add_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetAccountsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ledger.core.message.bitcoin.Account accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetAccountsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->accounts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetAccountsResponse)
}

::google::protobuf::uint8* GetAccountsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->accounts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetAccountsResponse)
  return target;
}

size_t GetAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetAccountsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Account accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAccountsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetAccountsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetAccountsResponse)
    MergeFrom(*source);
  }
}

void GetAccountsResponse::MergeFrom(const GetAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void GetAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccountsResponse::CopyFrom(const GetAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountsResponse::IsInitialized() const {
  return true;
}

void GetAccountsResponse::Swap(GetAccountsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAccountsResponse::InternalSwap(GetAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&accounts_)->InternalSwap(CastToBase(&other->accounts_));
}

::google::protobuf::Metadata GetAccountsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateAccountRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_CreateAccountRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::ledger::core::message::bitcoin::AccountConfiguration*>(
      ::ledger::core::message::bitcoin::AccountConfiguration::internal_default_instance());
}
class CreateAccountRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountConfiguration& config(const CreateAccountRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountConfiguration&
CreateAccountRequest::HasBitSetters::config(const CreateAccountRequest* msg) {
  return *msg->config_;
}
void CreateAccountRequest::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAccountRequest::kXpubFieldNumber;
const int CreateAccountRequest::kIndexFieldNumber;
const int CreateAccountRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAccountRequest::CreateAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.CreateAccountRequest)
}
CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xpub_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xpub().size() > 0) {
    xpub_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xpub_);
  }
  if (from.has_config()) {
    config_ = new ::ledger::core::message::bitcoin::AccountConfiguration(*from.config_);
  } else {
    config_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.CreateAccountRequest)
}

void CreateAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateAccountRequest_bitcoin_2fcommands_2eproto.base);
  xpub_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&config_)) + sizeof(index_));
}

CreateAccountRequest::~CreateAccountRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.CreateAccountRequest)
  SharedDtor();
}

void CreateAccountRequest::SharedDtor() {
  xpub_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void CreateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccountRequest& CreateAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateAccountRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CreateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.CreateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  index_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateAccountRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string xpub = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.CreateAccountRequest.xpub");
        object = msg->mutable_xpub();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ledger.core.message.bitcoin.AccountConfiguration config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountConfiguration::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.CreateAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string xpub = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpub()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xpub().data(), static_cast<int>(this->xpub().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.CreateAccountRequest.xpub"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.AccountConfiguration config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.CreateAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.CreateAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.CreateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xpub = 1;
  if (this->xpub().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub().data(), static_cast<int>(this->xpub().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateAccountRequest.xpub");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->xpub(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // .ledger.core.message.bitcoin.AccountConfiguration config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.CreateAccountRequest)
}

::google::protobuf::uint8* CreateAccountRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.CreateAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xpub = 1;
  if (this->xpub().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xpub().data(), static_cast<int>(this->xpub().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateAccountRequest.xpub");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->xpub(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // .ledger.core.message.bitcoin.AccountConfiguration config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.CreateAccountRequest)
  return target;
}

size_t CreateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.CreateAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string xpub = 1;
  if (this->xpub().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xpub());
  }

  // .ledger.core.message.bitcoin.AccountConfiguration config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.CreateAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.CreateAccountRequest)
    MergeFrom(*source);
  }
}

void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpub().size() > 0) {

    xpub_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xpub_);
  }
  if (from.has_config()) {
    mutable_config()->::ledger::core::message::bitcoin::AccountConfiguration::MergeFrom(from.config());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void CreateAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {
  return true;
}

void CreateAccountRequest::Swap(CreateAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAccountRequest::InternalSwap(CreateAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  xpub_.Swap(&other->xpub_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(index_, other->index_);
}

::google::protobuf::Metadata CreateAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateAccountResponse::InitAsDefaultInstance() {
}
class CreateAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAccountResponse::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAccountResponse::CreateAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.CreateAccountResponse)
}
CreateAccountResponse::CreateAccountResponse(const CreateAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.CreateAccountResponse)
}

void CreateAccountResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateAccountResponse_bitcoin_2fcommands_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateAccountResponse::~CreateAccountResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.CreateAccountResponse)
  SharedDtor();
}

void CreateAccountResponse::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccountResponse& CreateAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateAccountResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CreateAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.CreateAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateAccountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string Account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.CreateAccountResponse.Account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.CreateAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.CreateAccountResponse.Account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.CreateAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.CreateAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.CreateAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateAccountResponse.Account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.CreateAccountResponse)
}

::google::protobuf::uint8* CreateAccountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.CreateAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.CreateAccountResponse.Account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.CreateAccountResponse)
  return target;
}

size_t CreateAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.CreateAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.CreateAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.CreateAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.CreateAccountResponse)
    MergeFrom(*source);
  }
}

void CreateAccountResponse::MergeFrom(const CreateAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.CreateAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void CreateAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.CreateAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountResponse::CopyFrom(const CreateAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.CreateAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountResponse::IsInitialized() const {
  return true;
}

void CreateAccountResponse::Swap(CreateAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAccountResponse::InternalSwap(CreateAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CreateAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncAccountRequest::InitAsDefaultInstance() {
}
class SyncAccountRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncAccountRequest::kAccUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncAccountRequest::SyncAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.SyncAccountRequest)
}
SyncAccountRequest::SyncAccountRequest(const SyncAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acc_uid().size() > 0) {
    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.SyncAccountRequest)
}

void SyncAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SyncAccountRequest::~SyncAccountRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.SyncAccountRequest)
  SharedDtor();
}

void SyncAccountRequest::SharedDtor() {
  acc_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncAccountRequest& SyncAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SyncAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncAccountRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.SyncAccountRequest.acc_uid");
        object = msg->mutable_acc_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.SyncAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.SyncAccountRequest.acc_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.SyncAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.SyncAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.SyncAccountRequest.acc_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.SyncAccountRequest)
}

::google::protobuf::uint8* SyncAccountRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.SyncAccountRequest.acc_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.SyncAccountRequest)
  return target;
}

size_t SyncAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.SyncAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acc_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SyncAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.SyncAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.SyncAccountRequest)
    MergeFrom(*source);
  }
}

void SyncAccountRequest::MergeFrom(const SyncAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_uid().size() > 0) {

    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
}

void SyncAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAccountRequest::CopyFrom(const SyncAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAccountRequest::IsInitialized() const {
  return true;
}

void SyncAccountRequest::Swap(SyncAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncAccountRequest::InternalSwap(SyncAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  acc_uid_.Swap(&other->acc_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SyncAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncAccountResponse::InitAsDefaultInstance() {
}
class SyncAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncAccountResponse::kNewAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncAccountResponse::SyncAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.SyncAccountResponse)
}
SyncAccountResponse::SyncAccountResponse(const SyncAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_acc_ = from.new_acc_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.SyncAccountResponse)
}

void SyncAccountResponse::SharedCtor() {
  new_acc_ = false;
}

SyncAccountResponse::~SyncAccountResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.SyncAccountResponse)
  SharedDtor();
}

void SyncAccountResponse::SharedDtor() {
}

void SyncAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncAccountResponse& SyncAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SyncAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_acc_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncAccountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool new_acc = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_new_acc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.SyncAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool new_acc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.SyncAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.SyncAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->new_acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.SyncAccountResponse)
}

::google::protobuf::uint8* SyncAccountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->new_acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.SyncAccountResponse)
  return target;
}

size_t SyncAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.SyncAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SyncAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.SyncAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.SyncAccountResponse)
    MergeFrom(*source);
  }
}

void SyncAccountResponse::MergeFrom(const SyncAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_acc() != 0) {
    set_new_acc(from.new_acc());
  }
}

void SyncAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAccountResponse::CopyFrom(const SyncAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAccountResponse::IsInitialized() const {
  return true;
}

void SyncAccountResponse::Swap(SyncAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncAccountResponse::InternalSwap(SyncAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_acc_, other->new_acc_);
}

::google::protobuf::Metadata SyncAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetBalanceRequest::InitAsDefaultInstance() {
}
class GetBalanceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceRequest::kAccUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceRequest::GetBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acc_uid().size() > 0) {
    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetBalanceRequest)
  SharedDtor();
}

void GetBalanceRequest::SharedDtor() {
  acc_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceRequest& GetBalanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetBalanceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetBalanceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.GetBalanceRequest.acc_uid");
        object = msg->mutable_acc_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetBalanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.GetBalanceRequest.acc_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetBalanceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetBalanceRequest.acc_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetBalanceRequest)
}

::google::protobuf::uint8* GetBalanceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetBalanceRequest.acc_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetBalanceRequest)
  return target;
}

size_t GetBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetBalanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acc_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_uid().size() > 0) {

    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
}

void GetBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {
  return true;
}

void GetBalanceRequest::Swap(GetBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  acc_uid_.Swap(&other->acc_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetBalanceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetBalanceResponse::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::ledger::core::message::common::Amount*>(
      ::ledger::core::message::common::Amount::internal_default_instance());
}
class GetBalanceResponse::HasBitSetters {
 public:
  static const ::ledger::core::message::common::Amount& amount(const GetBalanceResponse* msg);
};

const ::ledger::core::message::common::Amount&
GetBalanceResponse::HasBitSetters::amount(const GetBalanceResponse* msg) {
  return *msg->amount_;
}
void GetBalanceResponse::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceResponse::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceResponse::GetBalanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amount()) {
    amount_ = new ::ledger::core::message::common::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetBalanceResponse)
}

void GetBalanceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  amount_ = nullptr;
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetBalanceResponse)
  SharedDtor();
}

void GetBalanceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
}

void GetBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceResponse& GetBalanceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetBalanceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetBalanceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.common.Amount amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::common::Amount::_InternalParse;
        object = msg->mutable_amount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetBalanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetBalanceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.common.Amount amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetBalanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetBalanceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetBalanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetBalanceResponse)
}

::google::protobuf::uint8* GetBalanceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetBalanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetBalanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetBalanceResponse)
    MergeFrom(*source);
  }
}

void GetBalanceResponse::MergeFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    mutable_amount()->::ledger::core::message::common::Amount::MergeFrom(from.amount());
  }
}

void GetBalanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::Swap(GetBalanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata GetBalanceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOperationsRequest::InitAsDefaultInstance() {
}
class GetOperationsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperationsRequest::kAccUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperationsRequest::GetOperationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetOperationsRequest)
}
GetOperationsRequest::GetOperationsRequest(const GetOperationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acc_uid().size() > 0) {
    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetOperationsRequest)
}

void GetOperationsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetOperationsRequest::~GetOperationsRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetOperationsRequest)
  SharedDtor();
}

void GetOperationsRequest::SharedDtor() {
  acc_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetOperationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsRequest& GetOperationsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperationsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOperationsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.GetOperationsRequest.acc_uid");
        object = msg->mutable_acc_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetOperationsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.GetOperationsRequest.acc_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetOperationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetOperationsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetOperationsRequest.acc_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc_uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetOperationsRequest)
}

::google::protobuf::uint8* GetOperationsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetOperationsRequest.acc_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc_uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetOperationsRequest)
  return target;
}

size_t GetOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetOperationsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acc_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetOperationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetOperationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetOperationsRequest)
    MergeFrom(*source);
  }
}

void GetOperationsRequest::MergeFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_uid().size() > 0) {

    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
}

void GetOperationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsRequest::CopyFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsRequest::IsInitialized() const {
  return true;
}

void GetOperationsRequest::Swap(GetOperationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperationsRequest::InternalSwap(GetOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  acc_uid_.Swap(&other->acc_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetOperationsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOperationsResponse::InitAsDefaultInstance() {
}
class GetOperationsResponse::HasBitSetters {
 public:
};

void GetOperationsResponse::clear_operations() {
  operations_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperationsResponse::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperationsResponse::GetOperationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetOperationsResponse)
}
GetOperationsResponse::GetOperationsResponse(const GetOperationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetOperationsResponse)
}

void GetOperationsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
}

GetOperationsResponse::~GetOperationsResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetOperationsResponse)
  SharedDtor();
}

void GetOperationsResponse::SharedDtor() {
}

void GetOperationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsResponse& GetOperationsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperationsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOperationsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ledger.core.message.bitcoin.Operation operations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ledger::core::message::bitcoin::Operation::_InternalParse;
          object = msg->add_operations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetOperationsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ledger.core.message.bitcoin.Operation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetOperationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetOperationsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->operations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetOperationsResponse)
}

::google::protobuf::uint8* GetOperationsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->operations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetOperationsResponse)
  return target;
}

size_t GetOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetOperationsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetOperationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetOperationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetOperationsResponse)
    MergeFrom(*source);
  }
}

void GetOperationsResponse::MergeFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void GetOperationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsResponse::CopyFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsResponse::IsInitialized() const {
  return true;
}

void GetOperationsResponse::Swap(GetOperationsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperationsResponse::InternalSwap(GetOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&operations_)->InternalSwap(CastToBase(&other->operations_));
}

::google::protobuf::Metadata GetOperationsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetAccountSettingsRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_SetAccountSettingsRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::ledger::core::message::bitcoin::AccountSettings*>(
      ::ledger::core::message::bitcoin::AccountSettings::internal_default_instance());
}
class SetAccountSettingsRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountSettings& settings(const SetAccountSettingsRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountSettings&
SetAccountSettingsRequest::HasBitSetters::settings(const SetAccountSettingsRequest* msg) {
  return *msg->settings_;
}
void SetAccountSettingsRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAccountSettingsRequest::kAccUidFieldNumber;
const int SetAccountSettingsRequest::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAccountSettingsRequest::SetAccountSettingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.SetAccountSettingsRequest)
}
SetAccountSettingsRequest::SetAccountSettingsRequest(const SetAccountSettingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.acc_uid().size() > 0) {
    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
  if (from.has_settings()) {
    settings_ = new ::ledger::core::message::bitcoin::AccountSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.SetAccountSettingsRequest)
}

void SetAccountSettingsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetAccountSettingsRequest_bitcoin_2fcommands_2eproto.base);
  acc_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

SetAccountSettingsRequest::~SetAccountSettingsRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  SharedDtor();
}

void SetAccountSettingsRequest::SharedDtor() {
  acc_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void SetAccountSettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAccountSettingsRequest& SetAccountSettingsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetAccountSettingsRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SetAccountSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAccountSettingsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetAccountSettingsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.SetAccountSettingsRequest.acc_uid");
        object = msg->mutable_acc_uid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ledger.core.message.bitcoin.AccountSettings settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountSettings::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAccountSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string acc_uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.SetAccountSettingsRequest.acc_uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.AccountSettings settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAccountSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.SetAccountSettingsRequest.acc_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->acc_uid(), output);
  }

  // .ledger.core.message.bitcoin.AccountSettings settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.SetAccountSettingsRequest)
}

::google::protobuf::uint8* SetAccountSettingsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acc_uid().data(), static_cast<int>(this->acc_uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.SetAccountSettingsRequest.acc_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc_uid(), target);
  }

  // .ledger.core.message.bitcoin.AccountSettings settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  return target;
}

size_t SetAccountSettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string acc_uid = 1;
  if (this->acc_uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acc_uid());
  }

  // .ledger.core.message.bitcoin.AccountSettings settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccountSettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccountSettingsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetAccountSettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.SetAccountSettingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.SetAccountSettingsRequest)
    MergeFrom(*source);
  }
}

void SetAccountSettingsRequest::MergeFrom(const SetAccountSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_uid().size() > 0) {

    acc_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acc_uid_);
  }
  if (from.has_settings()) {
    mutable_settings()->::ledger::core::message::bitcoin::AccountSettings::MergeFrom(from.settings());
  }
}

void SetAccountSettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccountSettingsRequest::CopyFrom(const SetAccountSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.SetAccountSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccountSettingsRequest::IsInitialized() const {
  return true;
}

void SetAccountSettingsRequest::Swap(SetAccountSettingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAccountSettingsRequest::InternalSwap(SetAccountSettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  acc_uid_.Swap(&other->acc_uid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata SetAccountSettingsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
class Request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kSubmessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  submessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.submessage().size() > 0) {
    submessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submessage_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Request_bitcoin_2fcommands_2eproto.base);
  submessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  submessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Request_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.RequestType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::ledger::core::message::bitcoin::RequestType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes submessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_submessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.RequestType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ledger::core::message::bitcoin::RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes submessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_submessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.RequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes submessage = 2;
  if (this->submessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->submessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.RequestType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes submessage = 2;
  if (this->submessage().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->submessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes submessage = 2;
  if (this->submessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->submessage());
  }

  // .ledger.core.message.bitcoin.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.submessage().size() > 0) {

    submessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.submessage_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  submessage_.Swap(&other->submessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetWalletsResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetWalletsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetWalletsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::CreateWalletRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::CreateWalletRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::CreateWalletRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::CreateWalletResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::CreateWalletResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::CreateWalletResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetAccountsRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetAccountsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetAccountsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetAccountsResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetAccountsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::CreateAccountRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::CreateAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::CreateAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::CreateAccountResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::CreateAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::CreateAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::SyncAccountRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::SyncAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::SyncAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::SyncAccountResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::SyncAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::SyncAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetBalanceRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetBalanceResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetOperationsRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetOperationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetOperationsResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetOperationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::SetAccountSettingsRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::SetAccountSettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::SetAccountSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::Request* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::Request >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::Request >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
