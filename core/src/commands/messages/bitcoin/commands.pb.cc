// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/commands.proto

#include "bitcoin/commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2faccount_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountID_bitcoin_2faccount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2fcommands_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bitcoin_2foperation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Operation_bitcoin_2foperation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2famount_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Amount_common_2famount_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2fblock_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Block_common_2fblock_2eproto;
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
class LedgerExplorerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LedgerExplorerConfig> _instance;
} _LedgerExplorerConfig_default_instance_;
class SyncAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncAccountRequest> _instance;
} _SyncAccountRequest_default_instance_;
class SyncAccountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncAccountResponse> _instance;
} _SyncAccountResponse_default_instance_;
class GetBalanceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceRequest> _instance;
} _GetBalanceRequest_default_instance_;
class GetBalanceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceResponse> _instance;
} _GetBalanceResponse_default_instance_;
class GetOperationsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOperationsRequest> _instance;
} _GetOperationsRequest_default_instance_;
class GetOperationsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOperationsResponse> _instance;
} _GetOperationsResponse_default_instance_;
class GetLastBlockRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLastBlockRequest> _instance;
} _GetLastBlockRequest_default_instance_;
class GetLastBlockResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLastBlockResponse> _instance;
} _GetLastBlockResponse_default_instance_;
class GetFreshAddressRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFreshAddressRequest> _instance;
} _GetFreshAddressRequest_default_instance_;
class GetFreshAddressResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFreshAddressResponse> _instance;
} _GetFreshAddressResponse_default_instance_;
class BitcoinRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitcoinRequest> _instance;
  const ::ledger::core::message::bitcoin::SyncAccountRequest* sync_account_;
  const ::ledger::core::message::bitcoin::GetBalanceRequest* get_balance_;
  const ::ledger::core::message::bitcoin::GetOperationsRequest* get_operations_;
  const ::ledger::core::message::bitcoin::GetLastBlockRequest* get_last_block_;
  const ::ledger::core::message::bitcoin::GetFreshAddressRequest* get_fresh_address_;
} _BitcoinRequest_default_instance_;
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
static void InitDefaultsLedgerExplorerConfig_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_LedgerExplorerConfig_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::LedgerExplorerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::LedgerExplorerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLedgerExplorerConfig_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsSyncAccountRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::SyncAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::SyncAccountRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSyncAccountRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountID_bitcoin_2faccount_2eproto.base,
      &scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto.base,}};

static void InitDefaultsSyncAccountResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_SyncAccountResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::SyncAccountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::SyncAccountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncAccountResponse_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsGetBalanceRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetBalanceRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetBalanceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetBalanceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetBalanceRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountID_bitcoin_2faccount_2eproto.base,}};

static void InitDefaultsGetBalanceResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetBalanceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetBalanceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetBalanceResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Amount_common_2famount_2eproto.base,}};

static void InitDefaultsGetOperationsRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetOperationsRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetOperationsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetOperationsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetOperationsRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountID_bitcoin_2faccount_2eproto.base,}};

static void InitDefaultsGetOperationsResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetOperationsResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetOperationsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetOperationsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetOperationsResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Operation_bitcoin_2foperation_2eproto.base,}};

static void InitDefaultsGetLastBlockRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetLastBlockRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetLastBlockRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetLastBlockRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetLastBlockRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountID_bitcoin_2faccount_2eproto.base,}};

static void InitDefaultsGetLastBlockResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetLastBlockResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetLastBlockResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetLastBlockResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetLastBlockResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetLastBlockResponse_bitcoin_2fcommands_2eproto}, {
      &scc_info_Block_common_2fblock_2eproto.base,}};

static void InitDefaultsGetFreshAddressRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetFreshAddressRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetFreshAddressRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetFreshAddressRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetFreshAddressRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_AccountID_bitcoin_2faccount_2eproto.base,}};

static void InitDefaultsGetFreshAddressResponse_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_GetFreshAddressResponse_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::GetFreshAddressResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::GetFreshAddressResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetFreshAddressResponse_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetFreshAddressResponse_bitcoin_2fcommands_2eproto}, {}};

static void InitDefaultsBitcoinRequest_bitcoin_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_;
    new (ptr) ::ledger::core::message::bitcoin::BitcoinRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ledger::core::message::bitcoin::BitcoinRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_BitcoinRequest_bitcoin_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsBitcoinRequest_bitcoin_2fcommands_2eproto}, {
      &scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base,
      &scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base,
      &scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base,
      &scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto.base,
      &scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto.base,}};

void InitDefaults_bitcoin_2fcommands_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLastBlockResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetFreshAddressResponse_bitcoin_2fcommands_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BitcoinRequest_bitcoin_2fcommands_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_bitcoin_2fcommands_2eproto[12];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_bitcoin_2fcommands_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_bitcoin_2fcommands_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_bitcoin_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, version_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, endpoint_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::LedgerExplorerConfig, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountRequest, explorer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::SyncAccountResponse, new_acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetBalanceResponse, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetOperationsResponse, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetLastBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetLastBlockRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetLastBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetLastBlockResponse, last_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetFreshAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetFreshAddressRequest, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetFreshAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetFreshAddressResponse, address_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::GetFreshAddressResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::BitcoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::BitcoinRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ledger::core::message::bitcoin::BitcoinRequestDefaultTypeInternal, sync_account_),
  offsetof(::ledger::core::message::bitcoin::BitcoinRequestDefaultTypeInternal, get_balance_),
  offsetof(::ledger::core::message::bitcoin::BitcoinRequestDefaultTypeInternal, get_operations_),
  offsetof(::ledger::core::message::bitcoin::BitcoinRequestDefaultTypeInternal, get_last_block_),
  offsetof(::ledger::core::message::bitcoin::BitcoinRequestDefaultTypeInternal, get_fresh_address_),
  PROTOBUF_FIELD_OFFSET(::ledger::core::message::bitcoin::BitcoinRequest, request_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ledger::core::message::bitcoin::LedgerExplorerConfig)},
  { 8, -1, sizeof(::ledger::core::message::bitcoin::SyncAccountRequest)},
  { 15, -1, sizeof(::ledger::core::message::bitcoin::SyncAccountResponse)},
  { 21, -1, sizeof(::ledger::core::message::bitcoin::GetBalanceRequest)},
  { 27, -1, sizeof(::ledger::core::message::bitcoin::GetBalanceResponse)},
  { 33, -1, sizeof(::ledger::core::message::bitcoin::GetOperationsRequest)},
  { 39, -1, sizeof(::ledger::core::message::bitcoin::GetOperationsResponse)},
  { 45, -1, sizeof(::ledger::core::message::bitcoin::GetLastBlockRequest)},
  { 51, -1, sizeof(::ledger::core::message::bitcoin::GetLastBlockResponse)},
  { 57, -1, sizeof(::ledger::core::message::bitcoin::GetFreshAddressRequest)},
  { 63, -1, sizeof(::ledger::core::message::bitcoin::GetFreshAddressResponse)},
  { 70, -1, sizeof(::ledger::core::message::bitcoin::BitcoinRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_LedgerExplorerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_SyncAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetOperationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetOperationsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetLastBlockRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetLastBlockResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetFreshAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_GetFreshAddressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_bitcoin_2fcommands_2eproto = {
  {}, AddDescriptors_bitcoin_2fcommands_2eproto, "bitcoin/commands.proto", schemas,
  file_default_instances, TableStruct_bitcoin_2fcommands_2eproto::offsets,
  file_level_metadata_bitcoin_2fcommands_2eproto, 12, file_level_enum_descriptors_bitcoin_2fcommands_2eproto, file_level_service_descriptors_bitcoin_2fcommands_2eproto,
};

const char descriptor_table_protodef_bitcoin_2fcommands_2eproto[] =
  "\n\026bitcoin/commands.proto\022\033ledger.core.me"
  "ssage.bitcoin\032\025bitcoin/account.proto\032\027bi"
  "tcoin/operation.proto\032\023common/amount.pro"
  "to\032\022common/block.proto\"G\n\024LedgerExplorer"
  "Config\022\017\n\007version\030\001 \001(\r\022\020\n\010endpoint\030\002 \001("
  "\t\022\014\n\004port\030\003 \001(\r\"\225\001\n\022SyncAccountRequest\022:"
  "\n\naccount_id\030\001 \001(\0132&.ledger.core.message"
  ".bitcoin.AccountID\022C\n\010explorer\030\002 \001(\01321.l"
  "edger.core.message.bitcoin.LedgerExplore"
  "rConfig\"&\n\023SyncAccountResponse\022\017\n\007new_ac"
  "c\030\001 \001(\010\"O\n\021GetBalanceRequest\022:\n\naccount_"
  "id\030\001 \001(\0132&.ledger.core.message.bitcoin.A"
  "ccountID\"H\n\022GetBalanceResponse\0222\n\006amount"
  "\030\001 \001(\0132\".ledger.core.message.common.Amou"
  "nt\"R\n\024GetOperationsRequest\022:\n\naccount_id"
  "\030\001 \001(\0132&.ledger.core.message.bitcoin.Acc"
  "ountID\"S\n\025GetOperationsResponse\022:\n\nopera"
  "tions\030\001 \003(\0132&.ledger.core.message.bitcoi"
  "n.Operation\"Q\n\023GetLastBlockRequest\022:\n\nac"
  "count_id\030\001 \001(\0132&.ledger.core.message.bit"
  "coin.AccountID\"M\n\024GetLastBlockResponse\0225"
  "\n\nlast_block\030\001 \001(\0132!.ledger.core.message"
  ".common.Block\"T\n\026GetFreshAddressRequest\022"
  ":\n\naccount_id\030\001 \001(\0132&.ledger.core.messag"
  "e.bitcoin.AccountID\"8\n\027GetFreshAddressRe"
  "sponse\022\017\n\007address\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\"\226\003"
  "\n\016BitcoinRequest\022G\n\014sync_account\030\001 \001(\0132/"
  ".ledger.core.message.bitcoin.SyncAccount"
  "RequestH\000\022E\n\013get_balance\030\002 \001(\0132..ledger."
  "core.message.bitcoin.GetBalanceRequestH\000"
  "\022K\n\016get_operations\030\003 \001(\01321.ledger.core.m"
  "essage.bitcoin.GetOperationsRequestH\000\022J\n"
  "\016get_last_block\030\004 \001(\01320.ledger.core.mess"
  "age.bitcoin.GetLastBlockRequestH\000\022P\n\021get"
  "_fresh_address\030\005 \001(\01323.ledger.core.messa"
  "ge.bitcoin.GetFreshAddressRequestH\000B\t\n\007r"
  "equestb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_bitcoin_2fcommands_2eproto = {
  false, InitDefaults_bitcoin_2fcommands_2eproto, 
  descriptor_table_protodef_bitcoin_2fcommands_2eproto,
  "bitcoin/commands.proto", &assign_descriptors_table_bitcoin_2fcommands_2eproto, 1454,
};

void AddDescriptors_bitcoin_2fcommands_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_bitcoin_2faccount_2eproto,
    ::AddDescriptors_bitcoin_2foperation_2eproto,
    ::AddDescriptors_common_2famount_2eproto,
    ::AddDescriptors_common_2fblock_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_bitcoin_2fcommands_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bitcoin_2fcommands_2eproto = []() { AddDescriptors_bitcoin_2fcommands_2eproto(); return true; }();
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {

// ===================================================================

void LedgerExplorerConfig::InitAsDefaultInstance() {
}
class LedgerExplorerConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerExplorerConfig::kVersionFieldNumber;
const int LedgerExplorerConfig::kEndpointFieldNumber;
const int LedgerExplorerConfig::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerExplorerConfig::LedgerExplorerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
}
LedgerExplorerConfig::LedgerExplorerConfig(const LedgerExplorerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.endpoint().size() > 0) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
}

void LedgerExplorerConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto.base);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(port_));
}

LedgerExplorerConfig::~LedgerExplorerConfig() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.LedgerExplorerConfig)
  SharedDtor();
}

void LedgerExplorerConfig::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LedgerExplorerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LedgerExplorerConfig& LedgerExplorerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LedgerExplorerConfig_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void LedgerExplorerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LedgerExplorerConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LedgerExplorerConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string endpoint = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
        object = msg->mutable_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LedgerExplorerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LedgerExplorerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.LedgerExplorerConfig)
}

::google::protobuf::uint8* LedgerExplorerConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.LedgerExplorerConfig.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.LedgerExplorerConfig)
  return target;
}

size_t LedgerExplorerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string endpoint = 2;
  if (this->endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedgerExplorerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LedgerExplorerConfig* source =
      ::google::protobuf::DynamicCastToGenerated<LedgerExplorerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.LedgerExplorerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.LedgerExplorerConfig)
    MergeFrom(*source);
  }
}

void LedgerExplorerConfig::MergeFrom(const LedgerExplorerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void LedgerExplorerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerExplorerConfig::CopyFrom(const LedgerExplorerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.LedgerExplorerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerExplorerConfig::IsInitialized() const {
  return true;
}

void LedgerExplorerConfig::Swap(LedgerExplorerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerExplorerConfig::InternalSwap(LedgerExplorerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata LedgerExplorerConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncAccountRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::ledger::core::message::bitcoin::AccountID*>(
      ::ledger::core::message::bitcoin::AccountID::internal_default_instance());
  ::ledger::core::message::bitcoin::_SyncAccountRequest_default_instance_._instance.get_mutable()->explorer_ = const_cast< ::ledger::core::message::bitcoin::LedgerExplorerConfig*>(
      ::ledger::core::message::bitcoin::LedgerExplorerConfig::internal_default_instance());
}
class SyncAccountRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountID& account_id(const SyncAccountRequest* msg);
  static const ::ledger::core::message::bitcoin::LedgerExplorerConfig& explorer(const SyncAccountRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountID&
SyncAccountRequest::HasBitSetters::account_id(const SyncAccountRequest* msg) {
  return *msg->account_id_;
}
const ::ledger::core::message::bitcoin::LedgerExplorerConfig&
SyncAccountRequest::HasBitSetters::explorer(const SyncAccountRequest* msg) {
  return *msg->explorer_;
}
void SyncAccountRequest::clear_account_id() {
  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncAccountRequest::kAccountIdFieldNumber;
const int SyncAccountRequest::kExplorerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncAccountRequest::SyncAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.SyncAccountRequest)
}
SyncAccountRequest::SyncAccountRequest(const SyncAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_id()) {
    account_id_ = new ::ledger::core::message::bitcoin::AccountID(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  if (from.has_explorer()) {
    explorer_ = new ::ledger::core::message::bitcoin::LedgerExplorerConfig(*from.explorer_);
  } else {
    explorer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.SyncAccountRequest)
}

void SyncAccountRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explorer_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(explorer_));
}

SyncAccountRequest::~SyncAccountRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.SyncAccountRequest)
  SharedDtor();
}

void SyncAccountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
  if (this != internal_default_instance()) delete explorer_;
}

void SyncAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncAccountRequest& SyncAccountRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncAccountRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SyncAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && explorer_ != nullptr) {
    delete explorer_;
  }
  explorer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncAccountRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncAccountRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountID::_InternalParse;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::LedgerExplorerConfig::_InternalParse;
        object = msg->mutable_explorer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.SyncAccountRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_explorer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.SyncAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.SyncAccountRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_id(this), output);
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::explorer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.SyncAccountRequest)
}

::google::protobuf::uint8* SyncAccountRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.SyncAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_id(this), target);
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::explorer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.SyncAccountRequest)
  return target;
}

size_t SyncAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.SyncAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_id_);
  }

  // .ledger.core.message.bitcoin.LedgerExplorerConfig explorer = 2;
  if (this->has_explorer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *explorer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAccountRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SyncAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.SyncAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.SyncAccountRequest)
    MergeFrom(*source);
  }
}

void SyncAccountRequest::MergeFrom(const SyncAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    mutable_account_id()->::ledger::core::message::bitcoin::AccountID::MergeFrom(from.account_id());
  }
  if (from.has_explorer()) {
    mutable_explorer()->::ledger::core::message::bitcoin::LedgerExplorerConfig::MergeFrom(from.explorer());
  }
}

void SyncAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAccountRequest::CopyFrom(const SyncAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.SyncAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAccountRequest::IsInitialized() const {
  return true;
}

void SyncAccountRequest::Swap(SyncAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncAccountRequest::InternalSwap(SyncAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
  swap(explorer_, other->explorer_);
}

::google::protobuf::Metadata SyncAccountRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncAccountResponse::InitAsDefaultInstance() {
}
class SyncAccountResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncAccountResponse::kNewAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncAccountResponse::SyncAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.SyncAccountResponse)
}
SyncAccountResponse::SyncAccountResponse(const SyncAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_acc_ = from.new_acc_;
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.SyncAccountResponse)
}

void SyncAccountResponse::SharedCtor() {
  new_acc_ = false;
}

SyncAccountResponse::~SyncAccountResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.SyncAccountResponse)
  SharedDtor();
}

void SyncAccountResponse::SharedDtor() {
}

void SyncAccountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncAccountResponse& SyncAccountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncAccountResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SyncAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_acc_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncAccountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncAccountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool new_acc = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_new_acc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.SyncAccountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool new_acc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.SyncAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.SyncAccountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->new_acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.SyncAccountResponse)
}

::google::protobuf::uint8* SyncAccountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.SyncAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->new_acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.SyncAccountResponse)
  return target;
}

size_t SyncAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.SyncAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool new_acc = 1;
  if (this->new_acc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAccountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SyncAccountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.SyncAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.SyncAccountResponse)
    MergeFrom(*source);
  }
}

void SyncAccountResponse::MergeFrom(const SyncAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_acc() != 0) {
    set_new_acc(from.new_acc());
  }
}

void SyncAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAccountResponse::CopyFrom(const SyncAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.SyncAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAccountResponse::IsInitialized() const {
  return true;
}

void SyncAccountResponse::Swap(SyncAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncAccountResponse::InternalSwap(SyncAccountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_acc_, other->new_acc_);
}

::google::protobuf::Metadata SyncAccountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetBalanceRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetBalanceRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::ledger::core::message::bitcoin::AccountID*>(
      ::ledger::core::message::bitcoin::AccountID::internal_default_instance());
}
class GetBalanceRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountID& account_id(const GetBalanceRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountID&
GetBalanceRequest::HasBitSetters::account_id(const GetBalanceRequest* msg) {
  return *msg->account_id_;
}
void GetBalanceRequest::clear_account_id() {
  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceRequest::GetBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_id()) {
    account_id_ = new ::ledger::core::message::bitcoin::AccountID(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  account_id_ = nullptr;
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetBalanceRequest)
  SharedDtor();
}

void GetBalanceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
}

void GetBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceRequest& GetBalanceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetBalanceRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetBalanceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetBalanceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountID::_InternalParse;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetBalanceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetBalanceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetBalanceRequest)
}

::google::protobuf::uint8* GetBalanceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetBalanceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetBalanceRequest)
  return target;
}

size_t GetBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetBalanceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    mutable_account_id()->::ledger::core::message::bitcoin::AccountID::MergeFrom(from.account_id());
  }
}

void GetBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {
  return true;
}

void GetBalanceRequest::Swap(GetBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata GetBalanceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetBalanceResponse::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetBalanceResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::ledger::core::message::common::Amount*>(
      ::ledger::core::message::common::Amount::internal_default_instance());
}
class GetBalanceResponse::HasBitSetters {
 public:
  static const ::ledger::core::message::common::Amount& amount(const GetBalanceResponse* msg);
};

const ::ledger::core::message::common::Amount&
GetBalanceResponse::HasBitSetters::amount(const GetBalanceResponse* msg) {
  return *msg->amount_;
}
void GetBalanceResponse::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceResponse::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceResponse::GetBalanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_amount()) {
    amount_ = new ::ledger::core::message::common::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetBalanceResponse)
}

void GetBalanceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  amount_ = nullptr;
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetBalanceResponse)
  SharedDtor();
}

void GetBalanceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
}

void GetBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceResponse& GetBalanceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetBalanceResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetBalanceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetBalanceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.common.Amount amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::common::Amount::_InternalParse;
        object = msg->mutable_amount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetBalanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetBalanceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.common.Amount amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetBalanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetBalanceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetBalanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::amount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetBalanceResponse)
}

::google::protobuf::uint8* GetBalanceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetBalanceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::amount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetBalanceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.common.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetBalanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetBalanceResponse)
    MergeFrom(*source);
  }
}

void GetBalanceResponse::MergeFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    mutable_amount()->::ledger::core::message::common::Amount::MergeFrom(from.amount());
  }
}

void GetBalanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::Swap(GetBalanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata GetBalanceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOperationsRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetOperationsRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::ledger::core::message::bitcoin::AccountID*>(
      ::ledger::core::message::bitcoin::AccountID::internal_default_instance());
}
class GetOperationsRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountID& account_id(const GetOperationsRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountID&
GetOperationsRequest::HasBitSetters::account_id(const GetOperationsRequest* msg) {
  return *msg->account_id_;
}
void GetOperationsRequest::clear_account_id() {
  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperationsRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperationsRequest::GetOperationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetOperationsRequest)
}
GetOperationsRequest::GetOperationsRequest(const GetOperationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_id()) {
    account_id_ = new ::ledger::core::message::bitcoin::AccountID(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetOperationsRequest)
}

void GetOperationsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  account_id_ = nullptr;
}

GetOperationsRequest::~GetOperationsRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetOperationsRequest)
  SharedDtor();
}

void GetOperationsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
}

void GetOperationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsRequest& GetOperationsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOperationsRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperationsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOperationsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountID::_InternalParse;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetOperationsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetOperationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetOperationsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetOperationsRequest)
}

::google::protobuf::uint8* GetOperationsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetOperationsRequest)
  return target;
}

size_t GetOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetOperationsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetOperationsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetOperationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetOperationsRequest)
    MergeFrom(*source);
  }
}

void GetOperationsRequest::MergeFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    mutable_account_id()->::ledger::core::message::bitcoin::AccountID::MergeFrom(from.account_id());
  }
}

void GetOperationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsRequest::CopyFrom(const GetOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsRequest::IsInitialized() const {
  return true;
}

void GetOperationsRequest::Swap(GetOperationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperationsRequest::InternalSwap(GetOperationsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata GetOperationsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOperationsResponse::InitAsDefaultInstance() {
}
class GetOperationsResponse::HasBitSetters {
 public:
};

void GetOperationsResponse::clear_operations() {
  operations_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperationsResponse::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperationsResponse::GetOperationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetOperationsResponse)
}
GetOperationsResponse::GetOperationsResponse(const GetOperationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetOperationsResponse)
}

void GetOperationsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
}

GetOperationsResponse::~GetOperationsResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetOperationsResponse)
  SharedDtor();
}

void GetOperationsResponse::SharedDtor() {
}

void GetOperationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperationsResponse& GetOperationsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOperationsResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperationsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOperationsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ledger.core.message.bitcoin.Operation operations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ledger::core::message::bitcoin::Operation::_InternalParse;
          object = msg->add_operations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetOperationsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ledger.core.message.bitcoin.Operation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetOperationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetOperationsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->operations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetOperationsResponse)
}

::google::protobuf::uint8* GetOperationsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->operations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetOperationsResponse)
  return target;
}

size_t GetOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetOperationsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ledger.core.message.bitcoin.Operation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->operations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetOperationsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetOperationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetOperationsResponse)
    MergeFrom(*source);
  }
}

void GetOperationsResponse::MergeFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void GetOperationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationsResponse::CopyFrom(const GetOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationsResponse::IsInitialized() const {
  return true;
}

void GetOperationsResponse::Swap(GetOperationsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperationsResponse::InternalSwap(GetOperationsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&operations_)->InternalSwap(CastToBase(&other->operations_));
}

::google::protobuf::Metadata GetOperationsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetLastBlockRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetLastBlockRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::ledger::core::message::bitcoin::AccountID*>(
      ::ledger::core::message::bitcoin::AccountID::internal_default_instance());
}
class GetLastBlockRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountID& account_id(const GetLastBlockRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountID&
GetLastBlockRequest::HasBitSetters::account_id(const GetLastBlockRequest* msg) {
  return *msg->account_id_;
}
void GetLastBlockRequest::clear_account_id() {
  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastBlockRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastBlockRequest::GetLastBlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetLastBlockRequest)
}
GetLastBlockRequest::GetLastBlockRequest(const GetLastBlockRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_id()) {
    account_id_ = new ::ledger::core::message::bitcoin::AccountID(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetLastBlockRequest)
}

void GetLastBlockRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto.base);
  account_id_ = nullptr;
}

GetLastBlockRequest::~GetLastBlockRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetLastBlockRequest)
  SharedDtor();
}

void GetLastBlockRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
}

void GetLastBlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastBlockRequest& GetLastBlockRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetLastBlockRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetLastBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLastBlockRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetLastBlockRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountID::_InternalParse;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLastBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetLastBlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetLastBlockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLastBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetLastBlockRequest)
}

::google::protobuf::uint8* GetLastBlockRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetLastBlockRequest)
  return target;
}

size_t GetLastBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastBlockRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetLastBlockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetLastBlockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetLastBlockRequest)
    MergeFrom(*source);
  }
}

void GetLastBlockRequest::MergeFrom(const GetLastBlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    mutable_account_id()->::ledger::core::message::bitcoin::AccountID::MergeFrom(from.account_id());
  }
}

void GetLastBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastBlockRequest::CopyFrom(const GetLastBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetLastBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastBlockRequest::IsInitialized() const {
  return true;
}

void GetLastBlockRequest::Swap(GetLastBlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastBlockRequest::InternalSwap(GetLastBlockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata GetLastBlockRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetLastBlockResponse::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetLastBlockResponse_default_instance_._instance.get_mutable()->last_block_ = const_cast< ::ledger::core::message::common::Block*>(
      ::ledger::core::message::common::Block::internal_default_instance());
}
class GetLastBlockResponse::HasBitSetters {
 public:
  static const ::ledger::core::message::common::Block& last_block(const GetLastBlockResponse* msg);
};

const ::ledger::core::message::common::Block&
GetLastBlockResponse::HasBitSetters::last_block(const GetLastBlockResponse* msg) {
  return *msg->last_block_;
}
void GetLastBlockResponse::clear_last_block() {
  if (GetArenaNoVirtual() == nullptr && last_block_ != nullptr) {
    delete last_block_;
  }
  last_block_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLastBlockResponse::kLastBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLastBlockResponse::GetLastBlockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetLastBlockResponse)
}
GetLastBlockResponse::GetLastBlockResponse(const GetLastBlockResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_block()) {
    last_block_ = new ::ledger::core::message::common::Block(*from.last_block_);
  } else {
    last_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetLastBlockResponse)
}

void GetLastBlockResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetLastBlockResponse_bitcoin_2fcommands_2eproto.base);
  last_block_ = nullptr;
}

GetLastBlockResponse::~GetLastBlockResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetLastBlockResponse)
  SharedDtor();
}

void GetLastBlockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete last_block_;
}

void GetLastBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastBlockResponse& GetLastBlockResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetLastBlockResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetLastBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && last_block_ != nullptr) {
    delete last_block_;
  }
  last_block_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetLastBlockResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetLastBlockResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.common.Block last_block = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::common::Block::_InternalParse;
        object = msg->mutable_last_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetLastBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.common.Block last_block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetLastBlockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetLastBlockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetLastBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Block last_block = 1;
  if (this->has_last_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::last_block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetLastBlockResponse)
}

::google::protobuf::uint8* GetLastBlockResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.common.Block last_block = 1;
  if (this->has_last_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::last_block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetLastBlockResponse)
  return target;
}

size_t GetLastBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.common.Block last_block = 1;
  if (this->has_last_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastBlockResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetLastBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetLastBlockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetLastBlockResponse)
    MergeFrom(*source);
  }
}

void GetLastBlockResponse::MergeFrom(const GetLastBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_last_block()) {
    mutable_last_block()->::ledger::core::message::common::Block::MergeFrom(from.last_block());
  }
}

void GetLastBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastBlockResponse::CopyFrom(const GetLastBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetLastBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastBlockResponse::IsInitialized() const {
  return true;
}

void GetLastBlockResponse::Swap(GetLastBlockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLastBlockResponse::InternalSwap(GetLastBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(last_block_, other->last_block_);
}

::google::protobuf::Metadata GetLastBlockResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetFreshAddressRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_GetFreshAddressRequest_default_instance_._instance.get_mutable()->account_id_ = const_cast< ::ledger::core::message::bitcoin::AccountID*>(
      ::ledger::core::message::bitcoin::AccountID::internal_default_instance());
}
class GetFreshAddressRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::AccountID& account_id(const GetFreshAddressRequest* msg);
};

const ::ledger::core::message::bitcoin::AccountID&
GetFreshAddressRequest::HasBitSetters::account_id(const GetFreshAddressRequest* msg) {
  return *msg->account_id_;
}
void GetFreshAddressRequest::clear_account_id() {
  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFreshAddressRequest::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFreshAddressRequest::GetFreshAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetFreshAddressRequest)
}
GetFreshAddressRequest::GetFreshAddressRequest(const GetFreshAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_id()) {
    account_id_ = new ::ledger::core::message::bitcoin::AccountID(*from.account_id_);
  } else {
    account_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetFreshAddressRequest)
}

void GetFreshAddressRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto.base);
  account_id_ = nullptr;
}

GetFreshAddressRequest::~GetFreshAddressRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetFreshAddressRequest)
  SharedDtor();
}

void GetFreshAddressRequest::SharedDtor() {
  if (this != internal_default_instance()) delete account_id_;
}

void GetFreshAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFreshAddressRequest& GetFreshAddressRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetFreshAddressRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFreshAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && account_id_ != nullptr) {
    delete account_id_;
  }
  account_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFreshAddressRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetFreshAddressRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::AccountID::_InternalParse;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFreshAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.AccountID account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetFreshAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetFreshAddressRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFreshAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetFreshAddressRequest)
}

::google::protobuf::uint8* GetFreshAddressRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetFreshAddressRequest)
  return target;
}

size_t GetFreshAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.AccountID account_id = 1;
  if (this->has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFreshAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFreshAddressRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetFreshAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetFreshAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetFreshAddressRequest)
    MergeFrom(*source);
  }
}

void GetFreshAddressRequest::MergeFrom(const GetFreshAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    mutable_account_id()->::ledger::core::message::bitcoin::AccountID::MergeFrom(from.account_id());
  }
}

void GetFreshAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFreshAddressRequest::CopyFrom(const GetFreshAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetFreshAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFreshAddressRequest::IsInitialized() const {
  return true;
}

void GetFreshAddressRequest::Swap(GetFreshAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFreshAddressRequest::InternalSwap(GetFreshAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata GetFreshAddressRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetFreshAddressResponse::InitAsDefaultInstance() {
}
class GetFreshAddressResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFreshAddressResponse::kAddressFieldNumber;
const int GetFreshAddressResponse::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFreshAddressResponse::GetFreshAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.GetFreshAddressResponse)
}
GetFreshAddressResponse::GetFreshAddressResponse(const GetFreshAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.GetFreshAddressResponse)
}

void GetFreshAddressResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetFreshAddressResponse_bitcoin_2fcommands_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetFreshAddressResponse::~GetFreshAddressResponse() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.GetFreshAddressResponse)
  SharedDtor();
}

void GetFreshAddressResponse::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFreshAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFreshAddressResponse& GetFreshAddressResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetFreshAddressResponse_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFreshAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFreshAddressResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetFreshAddressResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.GetFreshAddressResponse.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ledger.core.message.bitcoin.GetFreshAddressResponse.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFreshAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.GetFreshAddressResponse.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ledger.core.message.bitcoin.GetFreshAddressResponse.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.GetFreshAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.GetFreshAddressResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFreshAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetFreshAddressResponse.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetFreshAddressResponse.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.GetFreshAddressResponse)
}

::google::protobuf::uint8* GetFreshAddressResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetFreshAddressResponse.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ledger.core.message.bitcoin.GetFreshAddressResponse.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.GetFreshAddressResponse)
  return target;
}

size_t GetFreshAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFreshAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFreshAddressResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetFreshAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.GetFreshAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.GetFreshAddressResponse)
    MergeFrom(*source);
  }
}

void GetFreshAddressResponse::MergeFrom(const GetFreshAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void GetFreshAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFreshAddressResponse::CopyFrom(const GetFreshAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.GetFreshAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFreshAddressResponse::IsInitialized() const {
  return true;
}

void GetFreshAddressResponse::Swap(GetFreshAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFreshAddressResponse::InternalSwap(GetFreshAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetFreshAddressResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BitcoinRequest::InitAsDefaultInstance() {
  ::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_.sync_account_ = const_cast< ::ledger::core::message::bitcoin::SyncAccountRequest*>(
      ::ledger::core::message::bitcoin::SyncAccountRequest::internal_default_instance());
  ::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_.get_balance_ = const_cast< ::ledger::core::message::bitcoin::GetBalanceRequest*>(
      ::ledger::core::message::bitcoin::GetBalanceRequest::internal_default_instance());
  ::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_.get_operations_ = const_cast< ::ledger::core::message::bitcoin::GetOperationsRequest*>(
      ::ledger::core::message::bitcoin::GetOperationsRequest::internal_default_instance());
  ::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_.get_last_block_ = const_cast< ::ledger::core::message::bitcoin::GetLastBlockRequest*>(
      ::ledger::core::message::bitcoin::GetLastBlockRequest::internal_default_instance());
  ::ledger::core::message::bitcoin::_BitcoinRequest_default_instance_.get_fresh_address_ = const_cast< ::ledger::core::message::bitcoin::GetFreshAddressRequest*>(
      ::ledger::core::message::bitcoin::GetFreshAddressRequest::internal_default_instance());
}
class BitcoinRequest::HasBitSetters {
 public:
  static const ::ledger::core::message::bitcoin::SyncAccountRequest& sync_account(const BitcoinRequest* msg);
  static const ::ledger::core::message::bitcoin::GetBalanceRequest& get_balance(const BitcoinRequest* msg);
  static const ::ledger::core::message::bitcoin::GetOperationsRequest& get_operations(const BitcoinRequest* msg);
  static const ::ledger::core::message::bitcoin::GetLastBlockRequest& get_last_block(const BitcoinRequest* msg);
  static const ::ledger::core::message::bitcoin::GetFreshAddressRequest& get_fresh_address(const BitcoinRequest* msg);
};

const ::ledger::core::message::bitcoin::SyncAccountRequest&
BitcoinRequest::HasBitSetters::sync_account(const BitcoinRequest* msg) {
  return *msg->request_.sync_account_;
}
const ::ledger::core::message::bitcoin::GetBalanceRequest&
BitcoinRequest::HasBitSetters::get_balance(const BitcoinRequest* msg) {
  return *msg->request_.get_balance_;
}
const ::ledger::core::message::bitcoin::GetOperationsRequest&
BitcoinRequest::HasBitSetters::get_operations(const BitcoinRequest* msg) {
  return *msg->request_.get_operations_;
}
const ::ledger::core::message::bitcoin::GetLastBlockRequest&
BitcoinRequest::HasBitSetters::get_last_block(const BitcoinRequest* msg) {
  return *msg->request_.get_last_block_;
}
const ::ledger::core::message::bitcoin::GetFreshAddressRequest&
BitcoinRequest::HasBitSetters::get_fresh_address(const BitcoinRequest* msg) {
  return *msg->request_.get_fresh_address_;
}
void BitcoinRequest::set_allocated_sync_account(::ledger::core::message::bitcoin::SyncAccountRequest* sync_account) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (sync_account) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_account = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sync_account, submessage_arena);
    }
    set_has_sync_account();
    request_.sync_account_ = sync_account;
  }
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.BitcoinRequest.sync_account)
}
void BitcoinRequest::set_allocated_get_balance(::ledger::core::message::bitcoin::GetBalanceRequest* get_balance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_balance) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_balance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_balance, submessage_arena);
    }
    set_has_get_balance();
    request_.get_balance_ = get_balance;
  }
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.BitcoinRequest.get_balance)
}
void BitcoinRequest::set_allocated_get_operations(::ledger::core::message::bitcoin::GetOperationsRequest* get_operations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_operations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_operations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_operations, submessage_arena);
    }
    set_has_get_operations();
    request_.get_operations_ = get_operations;
  }
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.BitcoinRequest.get_operations)
}
void BitcoinRequest::set_allocated_get_last_block(::ledger::core::message::bitcoin::GetLastBlockRequest* get_last_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_last_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_last_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_last_block, submessage_arena);
    }
    set_has_get_last_block();
    request_.get_last_block_ = get_last_block;
  }
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.BitcoinRequest.get_last_block)
}
void BitcoinRequest::set_allocated_get_fresh_address(::ledger::core::message::bitcoin::GetFreshAddressRequest* get_fresh_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_fresh_address) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_fresh_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_fresh_address, submessage_arena);
    }
    set_has_get_fresh_address();
    request_.get_fresh_address_ = get_fresh_address;
  }
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.BitcoinRequest.get_fresh_address)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitcoinRequest::kSyncAccountFieldNumber;
const int BitcoinRequest::kGetBalanceFieldNumber;
const int BitcoinRequest::kGetOperationsFieldNumber;
const int BitcoinRequest::kGetLastBlockFieldNumber;
const int BitcoinRequest::kGetFreshAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitcoinRequest::BitcoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ledger.core.message.bitcoin.BitcoinRequest)
}
BitcoinRequest::BitcoinRequest(const BitcoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSyncAccount: {
      mutable_sync_account()->::ledger::core::message::bitcoin::SyncAccountRequest::MergeFrom(from.sync_account());
      break;
    }
    case kGetBalance: {
      mutable_get_balance()->::ledger::core::message::bitcoin::GetBalanceRequest::MergeFrom(from.get_balance());
      break;
    }
    case kGetOperations: {
      mutable_get_operations()->::ledger::core::message::bitcoin::GetOperationsRequest::MergeFrom(from.get_operations());
      break;
    }
    case kGetLastBlock: {
      mutable_get_last_block()->::ledger::core::message::bitcoin::GetLastBlockRequest::MergeFrom(from.get_last_block());
      break;
    }
    case kGetFreshAddress: {
      mutable_get_fresh_address()->::ledger::core::message::bitcoin::GetFreshAddressRequest::MergeFrom(from.get_fresh_address());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ledger.core.message.bitcoin.BitcoinRequest)
}

void BitcoinRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BitcoinRequest_bitcoin_2fcommands_2eproto.base);
  clear_has_request();
}

BitcoinRequest::~BitcoinRequest() {
  // @@protoc_insertion_point(destructor:ledger.core.message.bitcoin.BitcoinRequest)
  SharedDtor();
}

void BitcoinRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void BitcoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinRequest& BitcoinRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BitcoinRequest_bitcoin_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void BitcoinRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:ledger.core.message.bitcoin.BitcoinRequest)
  switch (request_case()) {
    case kSyncAccount: {
      delete request_.sync_account_;
      break;
    }
    case kGetBalance: {
      delete request_.get_balance_;
      break;
    }
    case kGetOperations: {
      delete request_.get_operations_;
      break;
    }
    case kGetLastBlock: {
      delete request_.get_last_block_;
      break;
    }
    case kGetFreshAddress: {
      delete request_.get_fresh_address_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void BitcoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ledger.core.message.bitcoin.BitcoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BitcoinRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BitcoinRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ledger.core.message.bitcoin.SyncAccountRequest sync_account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::SyncAccountRequest::_InternalParse;
        object = msg->mutable_sync_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ledger.core.message.bitcoin.GetBalanceRequest get_balance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::GetBalanceRequest::_InternalParse;
        object = msg->mutable_get_balance();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ledger.core.message.bitcoin.GetOperationsRequest get_operations = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::GetOperationsRequest::_InternalParse;
        object = msg->mutable_get_operations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ledger.core.message.bitcoin.GetLastBlockRequest get_last_block = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::GetLastBlockRequest::_InternalParse;
        object = msg->mutable_get_last_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ledger.core.message.bitcoin.GetFreshAddressRequest get_fresh_address = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ledger::core::message::bitcoin::GetFreshAddressRequest::_InternalParse;
        object = msg->mutable_get_fresh_address();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BitcoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ledger.core.message.bitcoin.BitcoinRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ledger.core.message.bitcoin.SyncAccountRequest sync_account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.GetBalanceRequest get_balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.GetOperationsRequest get_operations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.GetLastBlockRequest get_last_block = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_last_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ledger.core.message.bitcoin.GetFreshAddressRequest get_fresh_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_fresh_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ledger.core.message.bitcoin.BitcoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ledger.core.message.bitcoin.BitcoinRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BitcoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ledger.core.message.bitcoin.BitcoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.SyncAccountRequest sync_account = 1;
  if (has_sync_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sync_account(this), output);
  }

  // .ledger.core.message.bitcoin.GetBalanceRequest get_balance = 2;
  if (has_get_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::get_balance(this), output);
  }

  // .ledger.core.message.bitcoin.GetOperationsRequest get_operations = 3;
  if (has_get_operations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::get_operations(this), output);
  }

  // .ledger.core.message.bitcoin.GetLastBlockRequest get_last_block = 4;
  if (has_get_last_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::get_last_block(this), output);
  }

  // .ledger.core.message.bitcoin.GetFreshAddressRequest get_fresh_address = 5;
  if (has_get_fresh_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::get_fresh_address(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ledger.core.message.bitcoin.BitcoinRequest)
}

::google::protobuf::uint8* BitcoinRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ledger.core.message.bitcoin.BitcoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ledger.core.message.bitcoin.SyncAccountRequest sync_account = 1;
  if (has_sync_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sync_account(this), target);
  }

  // .ledger.core.message.bitcoin.GetBalanceRequest get_balance = 2;
  if (has_get_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::get_balance(this), target);
  }

  // .ledger.core.message.bitcoin.GetOperationsRequest get_operations = 3;
  if (has_get_operations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::get_operations(this), target);
  }

  // .ledger.core.message.bitcoin.GetLastBlockRequest get_last_block = 4;
  if (has_get_last_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::get_last_block(this), target);
  }

  // .ledger.core.message.bitcoin.GetFreshAddressRequest get_fresh_address = 5;
  if (has_get_fresh_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::get_fresh_address(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ledger.core.message.bitcoin.BitcoinRequest)
  return target;
}

size_t BitcoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ledger.core.message.bitcoin.BitcoinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .ledger.core.message.bitcoin.SyncAccountRequest sync_account = 1;
    case kSyncAccount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.sync_account_);
      break;
    }
    // .ledger.core.message.bitcoin.GetBalanceRequest get_balance = 2;
    case kGetBalance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_balance_);
      break;
    }
    // .ledger.core.message.bitcoin.GetOperationsRequest get_operations = 3;
    case kGetOperations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_operations_);
      break;
    }
    // .ledger.core.message.bitcoin.GetLastBlockRequest get_last_block = 4;
    case kGetLastBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_last_block_);
      break;
    }
    // .ledger.core.message.bitcoin.GetFreshAddressRequest get_fresh_address = 5;
    case kGetFreshAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_fresh_address_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ledger.core.message.bitcoin.BitcoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BitcoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ledger.core.message.bitcoin.BitcoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ledger.core.message.bitcoin.BitcoinRequest)
    MergeFrom(*source);
  }
}

void BitcoinRequest::MergeFrom(const BitcoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ledger.core.message.bitcoin.BitcoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSyncAccount: {
      mutable_sync_account()->::ledger::core::message::bitcoin::SyncAccountRequest::MergeFrom(from.sync_account());
      break;
    }
    case kGetBalance: {
      mutable_get_balance()->::ledger::core::message::bitcoin::GetBalanceRequest::MergeFrom(from.get_balance());
      break;
    }
    case kGetOperations: {
      mutable_get_operations()->::ledger::core::message::bitcoin::GetOperationsRequest::MergeFrom(from.get_operations());
      break;
    }
    case kGetLastBlock: {
      mutable_get_last_block()->::ledger::core::message::bitcoin::GetLastBlockRequest::MergeFrom(from.get_last_block());
      break;
    }
    case kGetFreshAddress: {
      mutable_get_fresh_address()->::ledger::core::message::bitcoin::GetFreshAddressRequest::MergeFrom(from.get_fresh_address());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void BitcoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ledger.core.message.bitcoin.BitcoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinRequest::CopyFrom(const BitcoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ledger.core.message.bitcoin.BitcoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinRequest::IsInitialized() const {
  return true;
}

void BitcoinRequest::Swap(BitcoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitcoinRequest::InternalSwap(BitcoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata BitcoinRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bitcoin_2fcommands_2eproto);
  return ::file_level_metadata_bitcoin_2fcommands_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::LedgerExplorerConfig* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::LedgerExplorerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::LedgerExplorerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::SyncAccountRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::SyncAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::SyncAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::SyncAccountResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::SyncAccountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::SyncAccountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetBalanceRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetBalanceResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetOperationsRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetOperationsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetOperationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetOperationsResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetOperationsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetLastBlockRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetLastBlockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetLastBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetLastBlockResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetLastBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetLastBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetFreshAddressRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetFreshAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetFreshAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::GetFreshAddressResponse* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::GetFreshAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::GetFreshAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ledger::core::message::bitcoin::BitcoinRequest* Arena::CreateMaybeMessage< ::ledger::core::message::bitcoin::BitcoinRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ledger::core::message::bitcoin::BitcoinRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
