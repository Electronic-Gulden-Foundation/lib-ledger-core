// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bitcoin/operation.proto

#ifndef PROTOBUF_INCLUDED_bitcoin_2foperation_2eproto
#define PROTOBUF_INCLUDED_bitcoin_2foperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/amount.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bitcoin_2foperation_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bitcoin_2foperation_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bitcoin_2foperation_2eproto();
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> ::ledger::core::message::bitcoin::Operation* Arena::CreateMaybeMessage<::ledger::core::message::bitcoin::Operation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ledger {
namespace core {
namespace message {
namespace bitcoin {

enum Operation_OperationType {
  Operation_OperationType_SEND = 0,
  Operation_OperationType_RECEIVE = 1,
  Operation_OperationType_Operation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Operation_OperationType_Operation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Operation_OperationType_IsValid(int value);
const Operation_OperationType Operation_OperationType_OperationType_MIN = Operation_OperationType_SEND;
const Operation_OperationType Operation_OperationType_OperationType_MAX = Operation_OperationType_RECEIVE;
const int Operation_OperationType_OperationType_ARRAYSIZE = Operation_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_OperationType_descriptor();
inline const ::std::string& Operation_OperationType_Name(Operation_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_OperationType_descriptor(), value);
}
inline bool Operation_OperationType_Parse(
    const ::std::string& name, Operation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_OperationType>(
    Operation_OperationType_descriptor(), name, value);
}
// ===================================================================

class Operation :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.message.bitcoin.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Operation* other);
  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_OperationType OperationType;
  static const OperationType SEND =
    Operation_OperationType_SEND;
  static const OperationType RECEIVE =
    Operation_OperationType_RECEIVE;
  static inline bool OperationType_IsValid(int value) {
    return Operation_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    Operation_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    Operation_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return Operation_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return Operation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string receivers = 3;
  int receivers_size() const;
  void clear_receivers();
  static const int kReceiversFieldNumber = 3;
  const ::std::string& receivers(int index) const;
  ::std::string* mutable_receivers(int index);
  void set_receivers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_receivers(int index, ::std::string&& value);
  #endif
  void set_receivers(int index, const char* value);
  void set_receivers(int index, const char* value, size_t size);
  ::std::string* add_receivers();
  void add_receivers(const ::std::string& value);
  #if LANG_CXX11
  void add_receivers(::std::string&& value);
  #endif
  void add_receivers(const char* value);
  void add_receivers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& receivers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_receivers();

  // repeated string senders = 4;
  int senders_size() const;
  void clear_senders();
  static const int kSendersFieldNumber = 4;
  const ::std::string& senders(int index) const;
  ::std::string* mutable_senders(int index);
  void set_senders(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_senders(int index, ::std::string&& value);
  #endif
  void set_senders(int index, const char* value);
  void set_senders(int index, const char* value, size_t size);
  ::std::string* add_senders();
  void add_senders(const ::std::string& value);
  #if LANG_CXX11
  void add_senders(::std::string&& value);
  #endif
  void add_senders(const char* value);
  void add_senders(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& senders() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_senders();

  // .ledger.core.message.common.Amount amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::ledger::core::message::common::Amount& amount() const;
  ::ledger::core::message::common::Amount* release_amount();
  ::ledger::core::message::common::Amount* mutable_amount();
  void set_allocated_amount(::ledger::core::message::common::Amount* amount);

  // .ledger.core.message.common.Amount fee = 2;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 2;
  const ::ledger::core::message::common::Amount& fee() const;
  ::ledger::core::message::common::Amount* release_fee();
  ::ledger::core::message::common::Amount* mutable_fee();
  void set_allocated_fee(::ledger::core::message::common::Amount* fee);

  // int64 block_height = 6;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 6;
  ::google::protobuf::int64 block_height() const;
  void set_block_height(::google::protobuf::int64 value);

  // int64 date_epoch_ms = 7;
  void clear_date_epoch_ms();
  static const int kDateEpochMsFieldNumber = 7;
  ::google::protobuf::int64 date_epoch_ms() const;
  void set_date_epoch_ms(::google::protobuf::int64 value);

  // .ledger.core.message.bitcoin.Operation.OperationType operation_type = 5;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 5;
  ::ledger::core::message::bitcoin::Operation_OperationType operation_type() const;
  void set_operation_type(::ledger::core::message::bitcoin::Operation_OperationType value);

  // @@protoc_insertion_point(class_scope:ledger.core.message.bitcoin.Operation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> receivers_;
  ::google::protobuf::RepeatedPtrField<::std::string> senders_;
  ::ledger::core::message::common::Amount* amount_;
  ::ledger::core::message::common::Amount* fee_;
  ::google::protobuf::int64 block_height_;
  ::google::protobuf::int64 date_epoch_ms_;
  int operation_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bitcoin_2foperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation

// .ledger.core.message.common.Amount amount = 1;
inline bool Operation::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline const ::ledger::core::message::common::Amount& Operation::amount() const {
  const ::ledger::core::message::common::Amount* p = amount_;
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::ledger::core::message::common::Amount*>(
      &::ledger::core::message::common::_Amount_default_instance_);
}
inline ::ledger::core::message::common::Amount* Operation::release_amount() {
  // @@protoc_insertion_point(field_release:ledger.core.message.bitcoin.Operation.amount)
  
  ::ledger::core::message::common::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::ledger::core::message::common::Amount* Operation::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::ledger::core::message::common::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.Operation.amount)
  return amount_;
}
inline void Operation::set_allocated_amount(::ledger::core::message::common::Amount* amount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(amount_);
  }
  if (amount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.Operation.amount)
}

// .ledger.core.message.common.Amount fee = 2;
inline bool Operation::has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline const ::ledger::core::message::common::Amount& Operation::fee() const {
  const ::ledger::core::message::common::Amount* p = fee_;
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.fee)
  return p != nullptr ? *p : *reinterpret_cast<const ::ledger::core::message::common::Amount*>(
      &::ledger::core::message::common::_Amount_default_instance_);
}
inline ::ledger::core::message::common::Amount* Operation::release_fee() {
  // @@protoc_insertion_point(field_release:ledger.core.message.bitcoin.Operation.fee)
  
  ::ledger::core::message::common::Amount* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::ledger::core::message::common::Amount* Operation::mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::ledger::core::message::common::Amount>(GetArenaNoVirtual());
    fee_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.Operation.fee)
  return fee_;
}
inline void Operation::set_allocated_fee(::ledger::core::message::common::Amount* fee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fee_);
  }
  if (fee) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.bitcoin.Operation.fee)
}

// repeated string receivers = 3;
inline int Operation::receivers_size() const {
  return receivers_.size();
}
inline void Operation::clear_receivers() {
  receivers_.Clear();
}
inline const ::std::string& Operation::receivers(int index) const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.receivers)
  return receivers_.Get(index);
}
inline ::std::string* Operation::mutable_receivers(int index) {
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.Operation.receivers)
  return receivers_.Mutable(index);
}
inline void Operation::set_receivers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.receivers)
  receivers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Operation::set_receivers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.receivers)
  receivers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Operation::set_receivers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receivers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ledger.core.message.bitcoin.Operation.receivers)
}
inline void Operation::set_receivers(int index, const char* value, size_t size) {
  receivers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.bitcoin.Operation.receivers)
}
inline ::std::string* Operation::add_receivers() {
  // @@protoc_insertion_point(field_add_mutable:ledger.core.message.bitcoin.Operation.receivers)
  return receivers_.Add();
}
inline void Operation::add_receivers(const ::std::string& value) {
  receivers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ledger.core.message.bitcoin.Operation.receivers)
}
#if LANG_CXX11
inline void Operation::add_receivers(::std::string&& value) {
  receivers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ledger.core.message.bitcoin.Operation.receivers)
}
#endif
inline void Operation::add_receivers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  receivers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ledger.core.message.bitcoin.Operation.receivers)
}
inline void Operation::add_receivers(const char* value, size_t size) {
  receivers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ledger.core.message.bitcoin.Operation.receivers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Operation::receivers() const {
  // @@protoc_insertion_point(field_list:ledger.core.message.bitcoin.Operation.receivers)
  return receivers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Operation::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:ledger.core.message.bitcoin.Operation.receivers)
  return &receivers_;
}

// repeated string senders = 4;
inline int Operation::senders_size() const {
  return senders_.size();
}
inline void Operation::clear_senders() {
  senders_.Clear();
}
inline const ::std::string& Operation::senders(int index) const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.senders)
  return senders_.Get(index);
}
inline ::std::string* Operation::mutable_senders(int index) {
  // @@protoc_insertion_point(field_mutable:ledger.core.message.bitcoin.Operation.senders)
  return senders_.Mutable(index);
}
inline void Operation::set_senders(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.senders)
  senders_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Operation::set_senders(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.senders)
  senders_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Operation::set_senders(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  senders_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ledger.core.message.bitcoin.Operation.senders)
}
inline void Operation::set_senders(int index, const char* value, size_t size) {
  senders_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.bitcoin.Operation.senders)
}
inline ::std::string* Operation::add_senders() {
  // @@protoc_insertion_point(field_add_mutable:ledger.core.message.bitcoin.Operation.senders)
  return senders_.Add();
}
inline void Operation::add_senders(const ::std::string& value) {
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ledger.core.message.bitcoin.Operation.senders)
}
#if LANG_CXX11
inline void Operation::add_senders(::std::string&& value) {
  senders_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ledger.core.message.bitcoin.Operation.senders)
}
#endif
inline void Operation::add_senders(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  senders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ledger.core.message.bitcoin.Operation.senders)
}
inline void Operation::add_senders(const char* value, size_t size) {
  senders_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ledger.core.message.bitcoin.Operation.senders)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Operation::senders() const {
  // @@protoc_insertion_point(field_list:ledger.core.message.bitcoin.Operation.senders)
  return senders_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Operation::mutable_senders() {
  // @@protoc_insertion_point(field_mutable_list:ledger.core.message.bitcoin.Operation.senders)
  return &senders_;
}

// .ledger.core.message.bitcoin.Operation.OperationType operation_type = 5;
inline void Operation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::ledger::core::message::bitcoin::Operation_OperationType Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.operation_type)
  return static_cast< ::ledger::core::message::bitcoin::Operation_OperationType >(operation_type_);
}
inline void Operation::set_operation_type(::ledger::core::message::bitcoin::Operation_OperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.operation_type)
}

// int64 block_height = 6;
inline void Operation::clear_block_height() {
  block_height_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Operation::block_height() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.block_height)
  return block_height_;
}
inline void Operation::set_block_height(::google::protobuf::int64 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.block_height)
}

// int64 date_epoch_ms = 7;
inline void Operation::clear_date_epoch_ms() {
  date_epoch_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Operation::date_epoch_ms() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.bitcoin.Operation.date_epoch_ms)
  return date_epoch_ms_;
}
inline void Operation::set_date_epoch_ms(::google::protobuf::int64 value) {
  
  date_epoch_ms_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.bitcoin.Operation.date_epoch_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bitcoin
}  // namespace message
}  // namespace core
}  // namespace ledger

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ledger::core::message::bitcoin::Operation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ledger::core::message::bitcoin::Operation_OperationType>() {
  return ::ledger::core::message::bitcoin::Operation_OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bitcoin_2foperation_2eproto
