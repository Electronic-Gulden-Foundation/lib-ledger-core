// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: utils/commands.proto

#ifndef PROTOBUF_INCLUDED_utils_2fcommands_2eproto
#define PROTOBUF_INCLUDED_utils_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_utils_2fcommands_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_utils_2fcommands_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_utils_2fcommands_2eproto();
namespace ledger {
namespace core {
namespace message {
namespace utils {
class CreateXpubFromPointsRequest;
class CreateXpubFromPointsRequestDefaultTypeInternal;
extern CreateXpubFromPointsRequestDefaultTypeInternal _CreateXpubFromPointsRequest_default_instance_;
class CreateXpubFromPointsResponse;
class CreateXpubFromPointsResponseDefaultTypeInternal;
extern CreateXpubFromPointsResponseDefaultTypeInternal _CreateXpubFromPointsResponse_default_instance_;
class UtilsRequest;
class UtilsRequestDefaultTypeInternal;
extern UtilsRequestDefaultTypeInternal _UtilsRequest_default_instance_;
}  // namespace utils
}  // namespace message
}  // namespace core
}  // namespace ledger
namespace google {
namespace protobuf {
template<> ::ledger::core::message::utils::CreateXpubFromPointsRequest* Arena::CreateMaybeMessage<::ledger::core::message::utils::CreateXpubFromPointsRequest>(Arena*);
template<> ::ledger::core::message::utils::CreateXpubFromPointsResponse* Arena::CreateMaybeMessage<::ledger::core::message::utils::CreateXpubFromPointsResponse>(Arena*);
template<> ::ledger::core::message::utils::UtilsRequest* Arena::CreateMaybeMessage<::ledger::core::message::utils::UtilsRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ledger {
namespace core {
namespace message {
namespace utils {

// ===================================================================

class CreateXpubFromPointsRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.message.utils.CreateXpubFromPointsRequest) */ {
 public:
  CreateXpubFromPointsRequest();
  virtual ~CreateXpubFromPointsRequest();

  CreateXpubFromPointsRequest(const CreateXpubFromPointsRequest& from);

  inline CreateXpubFromPointsRequest& operator=(const CreateXpubFromPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateXpubFromPointsRequest(CreateXpubFromPointsRequest&& from) noexcept
    : CreateXpubFromPointsRequest() {
    *this = ::std::move(from);
  }

  inline CreateXpubFromPointsRequest& operator=(CreateXpubFromPointsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateXpubFromPointsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateXpubFromPointsRequest* internal_default_instance() {
    return reinterpret_cast<const CreateXpubFromPointsRequest*>(
               &_CreateXpubFromPointsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateXpubFromPointsRequest* other);
  friend void swap(CreateXpubFromPointsRequest& a, CreateXpubFromPointsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateXpubFromPointsRequest* New() const final {
    return CreateMaybeMessage<CreateXpubFromPointsRequest>(nullptr);
  }

  CreateXpubFromPointsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateXpubFromPointsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateXpubFromPointsRequest& from);
  void MergeFrom(const CreateXpubFromPointsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateXpubFromPointsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version_prefix = 1;
  void clear_version_prefix();
  static const int kVersionPrefixFieldNumber = 1;
  const ::std::string& version_prefix() const;
  void set_version_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_version_prefix(::std::string&& value);
  #endif
  void set_version_prefix(const char* value);
  void set_version_prefix(const char* value, size_t size);
  ::std::string* mutable_version_prefix();
  ::std::string* release_version_prefix();
  void set_allocated_version_prefix(::std::string* version_prefix);

  // string parent_public_point = 3;
  void clear_parent_public_point();
  static const int kParentPublicPointFieldNumber = 3;
  const ::std::string& parent_public_point() const;
  void set_parent_public_point(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_public_point(::std::string&& value);
  #endif
  void set_parent_public_point(const char* value);
  void set_parent_public_point(const char* value, size_t size);
  ::std::string* mutable_parent_public_point();
  ::std::string* release_parent_public_point();
  void set_allocated_parent_public_point(::std::string* parent_public_point);

  // string chain_code = 5;
  void clear_chain_code();
  static const int kChainCodeFieldNumber = 5;
  const ::std::string& chain_code() const;
  void set_chain_code(const ::std::string& value);
  #if LANG_CXX11
  void set_chain_code(::std::string&& value);
  #endif
  void set_chain_code(const char* value);
  void set_chain_code(const char* value, size_t size);
  ::std::string* mutable_chain_code();
  ::std::string* release_chain_code();
  void set_allocated_chain_code(::std::string* chain_code);

  // string public_point = 6;
  void clear_public_point();
  static const int kPublicPointFieldNumber = 6;
  const ::std::string& public_point() const;
  void set_public_point(const ::std::string& value);
  #if LANG_CXX11
  void set_public_point(::std::string&& value);
  #endif
  void set_public_point(const char* value);
  void set_public_point(const char* value, size_t size);
  ::std::string* mutable_public_point();
  ::std::string* release_public_point();
  void set_allocated_public_point(::std::string* public_point);

  // uint32 depth = 2;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // uint32 index = 4;
  void clear_index();
  static const int kIndexFieldNumber = 4;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ledger.core.message.utils.CreateXpubFromPointsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_prefix_;
  ::google::protobuf::internal::ArenaStringPtr parent_public_point_;
  ::google::protobuf::internal::ArenaStringPtr chain_code_;
  ::google::protobuf::internal::ArenaStringPtr public_point_;
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_utils_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CreateXpubFromPointsResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.message.utils.CreateXpubFromPointsResponse) */ {
 public:
  CreateXpubFromPointsResponse();
  virtual ~CreateXpubFromPointsResponse();

  CreateXpubFromPointsResponse(const CreateXpubFromPointsResponse& from);

  inline CreateXpubFromPointsResponse& operator=(const CreateXpubFromPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateXpubFromPointsResponse(CreateXpubFromPointsResponse&& from) noexcept
    : CreateXpubFromPointsResponse() {
    *this = ::std::move(from);
  }

  inline CreateXpubFromPointsResponse& operator=(CreateXpubFromPointsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateXpubFromPointsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateXpubFromPointsResponse* internal_default_instance() {
    return reinterpret_cast<const CreateXpubFromPointsResponse*>(
               &_CreateXpubFromPointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateXpubFromPointsResponse* other);
  friend void swap(CreateXpubFromPointsResponse& a, CreateXpubFromPointsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateXpubFromPointsResponse* New() const final {
    return CreateMaybeMessage<CreateXpubFromPointsResponse>(nullptr);
  }

  CreateXpubFromPointsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateXpubFromPointsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateXpubFromPointsResponse& from);
  void MergeFrom(const CreateXpubFromPointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateXpubFromPointsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string xpub = 1;
  void clear_xpub();
  static const int kXpubFieldNumber = 1;
  const ::std::string& xpub() const;
  void set_xpub(const ::std::string& value);
  #if LANG_CXX11
  void set_xpub(::std::string&& value);
  #endif
  void set_xpub(const char* value);
  void set_xpub(const char* value, size_t size);
  ::std::string* mutable_xpub();
  ::std::string* release_xpub();
  void set_allocated_xpub(::std::string* xpub);

  // @@protoc_insertion_point(class_scope:ledger.core.message.utils.CreateXpubFromPointsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xpub_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_utils_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class UtilsRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ledger.core.message.utils.UtilsRequest) */ {
 public:
  UtilsRequest();
  virtual ~UtilsRequest();

  UtilsRequest(const UtilsRequest& from);

  inline UtilsRequest& operator=(const UtilsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UtilsRequest(UtilsRequest&& from) noexcept
    : UtilsRequest() {
    *this = ::std::move(from);
  }

  inline UtilsRequest& operator=(UtilsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UtilsRequest& default_instance();

  enum RequestCase {
    kXpubFromPoints = 1,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtilsRequest* internal_default_instance() {
    return reinterpret_cast<const UtilsRequest*>(
               &_UtilsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UtilsRequest* other);
  friend void swap(UtilsRequest& a, UtilsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UtilsRequest* New() const final {
    return CreateMaybeMessage<UtilsRequest>(nullptr);
  }

  UtilsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UtilsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UtilsRequest& from);
  void MergeFrom(const UtilsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtilsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ledger.core.message.utils.CreateXpubFromPointsRequest xpub_from_points = 1;
  bool has_xpub_from_points() const;
  void clear_xpub_from_points();
  static const int kXpubFromPointsFieldNumber = 1;
  const ::ledger::core::message::utils::CreateXpubFromPointsRequest& xpub_from_points() const;
  ::ledger::core::message::utils::CreateXpubFromPointsRequest* release_xpub_from_points();
  ::ledger::core::message::utils::CreateXpubFromPointsRequest* mutable_xpub_from_points();
  void set_allocated_xpub_from_points(::ledger::core::message::utils::CreateXpubFromPointsRequest* xpub_from_points);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:ledger.core.message.utils.UtilsRequest)
 private:
  class HasBitSetters;
  void set_has_xpub_from_points();

  inline bool has_request() const;
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnion {
    RequestUnion() {}
    ::ledger::core::message::utils::CreateXpubFromPointsRequest* xpub_from_points_;
  } request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_utils_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateXpubFromPointsRequest

// string version_prefix = 1;
inline void CreateXpubFromPointsRequest::clear_version_prefix() {
  version_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateXpubFromPointsRequest::version_prefix() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
  return version_prefix_.GetNoArena();
}
inline void CreateXpubFromPointsRequest::set_version_prefix(const ::std::string& value) {
  
  version_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
}
#if LANG_CXX11
inline void CreateXpubFromPointsRequest::set_version_prefix(::std::string&& value) {
  
  version_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
}
#endif
inline void CreateXpubFromPointsRequest::set_version_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
}
inline void CreateXpubFromPointsRequest::set_version_prefix(const char* value, size_t size) {
  
  version_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
}
inline ::std::string* CreateXpubFromPointsRequest::mutable_version_prefix() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
  return version_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateXpubFromPointsRequest::release_version_prefix() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
  
  return version_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateXpubFromPointsRequest::set_allocated_version_prefix(::std::string* version_prefix) {
  if (version_prefix != nullptr) {
    
  } else {
    
  }
  version_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_prefix);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.utils.CreateXpubFromPointsRequest.version_prefix)
}

// uint32 depth = 2;
inline void CreateXpubFromPointsRequest::clear_depth() {
  depth_ = 0u;
}
inline ::google::protobuf::uint32 CreateXpubFromPointsRequest::depth() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.depth)
  return depth_;
}
inline void CreateXpubFromPointsRequest::set_depth(::google::protobuf::uint32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.depth)
}

// string parent_public_point = 3;
inline void CreateXpubFromPointsRequest::clear_parent_public_point() {
  parent_public_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateXpubFromPointsRequest::parent_public_point() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
  return parent_public_point_.GetNoArena();
}
inline void CreateXpubFromPointsRequest::set_parent_public_point(const ::std::string& value) {
  
  parent_public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
}
#if LANG_CXX11
inline void CreateXpubFromPointsRequest::set_parent_public_point(::std::string&& value) {
  
  parent_public_point_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
}
#endif
inline void CreateXpubFromPointsRequest::set_parent_public_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
}
inline void CreateXpubFromPointsRequest::set_parent_public_point(const char* value, size_t size) {
  
  parent_public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
}
inline ::std::string* CreateXpubFromPointsRequest::mutable_parent_public_point() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
  return parent_public_point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateXpubFromPointsRequest::release_parent_public_point() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
  
  return parent_public_point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateXpubFromPointsRequest::set_allocated_parent_public_point(::std::string* parent_public_point) {
  if (parent_public_point != nullptr) {
    
  } else {
    
  }
  parent_public_point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_public_point);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.utils.CreateXpubFromPointsRequest.parent_public_point)
}

// uint32 index = 4;
inline void CreateXpubFromPointsRequest::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 CreateXpubFromPointsRequest::index() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.index)
  return index_;
}
inline void CreateXpubFromPointsRequest::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.index)
}

// string chain_code = 5;
inline void CreateXpubFromPointsRequest::clear_chain_code() {
  chain_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateXpubFromPointsRequest::chain_code() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
  return chain_code_.GetNoArena();
}
inline void CreateXpubFromPointsRequest::set_chain_code(const ::std::string& value) {
  
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
}
#if LANG_CXX11
inline void CreateXpubFromPointsRequest::set_chain_code(::std::string&& value) {
  
  chain_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
}
#endif
inline void CreateXpubFromPointsRequest::set_chain_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
}
inline void CreateXpubFromPointsRequest::set_chain_code(const char* value, size_t size) {
  
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
}
inline ::std::string* CreateXpubFromPointsRequest::mutable_chain_code() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
  return chain_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateXpubFromPointsRequest::release_chain_code() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
  
  return chain_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateXpubFromPointsRequest::set_allocated_chain_code(::std::string* chain_code) {
  if (chain_code != nullptr) {
    
  } else {
    
  }
  chain_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_code);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.utils.CreateXpubFromPointsRequest.chain_code)
}

// string public_point = 6;
inline void CreateXpubFromPointsRequest::clear_public_point() {
  public_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateXpubFromPointsRequest::public_point() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
  return public_point_.GetNoArena();
}
inline void CreateXpubFromPointsRequest::set_public_point(const ::std::string& value) {
  
  public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
}
#if LANG_CXX11
inline void CreateXpubFromPointsRequest::set_public_point(::std::string&& value) {
  
  public_point_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
}
#endif
inline void CreateXpubFromPointsRequest::set_public_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
}
inline void CreateXpubFromPointsRequest::set_public_point(const char* value, size_t size) {
  
  public_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
}
inline ::std::string* CreateXpubFromPointsRequest::mutable_public_point() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
  return public_point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateXpubFromPointsRequest::release_public_point() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
  
  return public_point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateXpubFromPointsRequest::set_allocated_public_point(::std::string* public_point) {
  if (public_point != nullptr) {
    
  } else {
    
  }
  public_point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_point);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.utils.CreateXpubFromPointsRequest.public_point)
}

// -------------------------------------------------------------------

// CreateXpubFromPointsResponse

// string xpub = 1;
inline void CreateXpubFromPointsResponse::clear_xpub() {
  xpub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateXpubFromPointsResponse::xpub() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
  return xpub_.GetNoArena();
}
inline void CreateXpubFromPointsResponse::set_xpub(const ::std::string& value) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
}
#if LANG_CXX11
inline void CreateXpubFromPointsResponse::set_xpub(::std::string&& value) {
  
  xpub_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
}
#endif
inline void CreateXpubFromPointsResponse::set_xpub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
}
inline void CreateXpubFromPointsResponse::set_xpub(const char* value, size_t size) {
  
  xpub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
}
inline ::std::string* CreateXpubFromPointsResponse::mutable_xpub() {
  
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
  return xpub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateXpubFromPointsResponse::release_xpub() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
  
  return xpub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateXpubFromPointsResponse::set_allocated_xpub(::std::string* xpub) {
  if (xpub != nullptr) {
    
  } else {
    
  }
  xpub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xpub);
  // @@protoc_insertion_point(field_set_allocated:ledger.core.message.utils.CreateXpubFromPointsResponse.xpub)
}

// -------------------------------------------------------------------

// UtilsRequest

// .ledger.core.message.utils.CreateXpubFromPointsRequest xpub_from_points = 1;
inline bool UtilsRequest::has_xpub_from_points() const {
  return request_case() == kXpubFromPoints;
}
inline void UtilsRequest::set_has_xpub_from_points() {
  _oneof_case_[0] = kXpubFromPoints;
}
inline void UtilsRequest::clear_xpub_from_points() {
  if (has_xpub_from_points()) {
    delete request_.xpub_from_points_;
    clear_has_request();
  }
}
inline ::ledger::core::message::utils::CreateXpubFromPointsRequest* UtilsRequest::release_xpub_from_points() {
  // @@protoc_insertion_point(field_release:ledger.core.message.utils.UtilsRequest.xpub_from_points)
  if (has_xpub_from_points()) {
    clear_has_request();
      ::ledger::core::message::utils::CreateXpubFromPointsRequest* temp = request_.xpub_from_points_;
    request_.xpub_from_points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ledger::core::message::utils::CreateXpubFromPointsRequest& UtilsRequest::xpub_from_points() const {
  // @@protoc_insertion_point(field_get:ledger.core.message.utils.UtilsRequest.xpub_from_points)
  return has_xpub_from_points()
      ? *request_.xpub_from_points_
      : *reinterpret_cast< ::ledger::core::message::utils::CreateXpubFromPointsRequest*>(&::ledger::core::message::utils::_CreateXpubFromPointsRequest_default_instance_);
}
inline ::ledger::core::message::utils::CreateXpubFromPointsRequest* UtilsRequest::mutable_xpub_from_points() {
  if (!has_xpub_from_points()) {
    clear_request();
    set_has_xpub_from_points();
    request_.xpub_from_points_ = CreateMaybeMessage< ::ledger::core::message::utils::CreateXpubFromPointsRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ledger.core.message.utils.UtilsRequest.xpub_from_points)
  return request_.xpub_from_points_;
}

inline bool UtilsRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void UtilsRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline UtilsRequest::RequestCase UtilsRequest::request_case() const {
  return UtilsRequest::RequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace utils
}  // namespace message
}  // namespace core
}  // namespace ledger

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_utils_2fcommands_2eproto
