// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_DATABASERESULTSET_HPP_JNI_
#define DJINNI_GENERATED_DATABASERESULTSET_HPP_JNI_

#include "../../api/DatabaseResultSet.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class DatabaseResultSet final : ::djinni::JniInterface<::ledger::core::api::DatabaseResultSet, DatabaseResultSet> {
public:
    using CppType = std::shared_ptr<::ledger::core::api::DatabaseResultSet>;
    using CppOptType = std::shared_ptr<::ledger::core::api::DatabaseResultSet>;
    using JniType = jobject;

    using Boxed = DatabaseResultSet;

    ~DatabaseResultSet();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<DatabaseResultSet>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<DatabaseResultSet>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    DatabaseResultSet();
    friend ::djinni::JniClass<DatabaseResultSet>;
    friend ::djinni::JniInterface<::ledger::core::api::DatabaseResultSet, DatabaseResultSet>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::ledger::core::api::DatabaseResultSet
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        int16_t getShortByName(const std::string & name) override;
        int32_t getIntByName(const std::string & name) override;
        float getFloatByName(const std::string & name) override;
        double getDoubleByName(const std::string & name) override;
        int64_t getLongByName(const std::string & name) override;
        std::string getStringByName(const std::string & name) override;
        bool isNullAtPos(int32_t pos) override;
        bool isNullForName(const std::string & name) override;
        std::string getColumnName(int32_t pos) override;
        int16_t getShortByPos(int32_t pos) override;
        int32_t getIntByPos(int32_t pos) override;
        float getFloatByPos(int32_t pos) override;
        double getDoubleByPos(int32_t pos) override;
        int64_t getLongByPos(int32_t pos) override;
        std::string getStringByPos(int32_t pos) override;
        std::shared_ptr<::ledger::core::api::DatabaseBlob> getBlobByPos(int32_t pos) override;
        int32_t getRowNumber() override;
        int32_t available() override;
        bool hasNext() override;
        std::shared_ptr<::ledger::core::api::DatabaseResultSet> next() override;
        void close() override;
        std::shared_ptr<::ledger::core::api::DatabaseError> getError() override;

    private:
        friend ::djinni::JniInterface<::ledger::core::api::DatabaseResultSet, ::djinni_generated::DatabaseResultSet>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/ledger/core/DatabaseResultSet") };
    const jmethodID method_getShortByName { ::djinni::jniGetMethodID(clazz.get(), "getShortByName", "(Ljava/lang/String;)S") };
    const jmethodID method_getIntByName { ::djinni::jniGetMethodID(clazz.get(), "getIntByName", "(Ljava/lang/String;)I") };
    const jmethodID method_getFloatByName { ::djinni::jniGetMethodID(clazz.get(), "getFloatByName", "(Ljava/lang/String;)F") };
    const jmethodID method_getDoubleByName { ::djinni::jniGetMethodID(clazz.get(), "getDoubleByName", "(Ljava/lang/String;)D") };
    const jmethodID method_getLongByName { ::djinni::jniGetMethodID(clazz.get(), "getLongByName", "(Ljava/lang/String;)J") };
    const jmethodID method_getStringByName { ::djinni::jniGetMethodID(clazz.get(), "getStringByName", "(Ljava/lang/String;)Ljava/lang/String;") };
    const jmethodID method_isNullAtPos { ::djinni::jniGetMethodID(clazz.get(), "isNullAtPos", "(I)Z") };
    const jmethodID method_isNullForName { ::djinni::jniGetMethodID(clazz.get(), "isNullForName", "(Ljava/lang/String;)Z") };
    const jmethodID method_getColumnName { ::djinni::jniGetMethodID(clazz.get(), "getColumnName", "(I)Ljava/lang/String;") };
    const jmethodID method_getShortByPos { ::djinni::jniGetMethodID(clazz.get(), "getShortByPos", "(I)S") };
    const jmethodID method_getIntByPos { ::djinni::jniGetMethodID(clazz.get(), "getIntByPos", "(I)I") };
    const jmethodID method_getFloatByPos { ::djinni::jniGetMethodID(clazz.get(), "getFloatByPos", "(I)F") };
    const jmethodID method_getDoubleByPos { ::djinni::jniGetMethodID(clazz.get(), "getDoubleByPos", "(I)D") };
    const jmethodID method_getLongByPos { ::djinni::jniGetMethodID(clazz.get(), "getLongByPos", "(I)J") };
    const jmethodID method_getStringByPos { ::djinni::jniGetMethodID(clazz.get(), "getStringByPos", "(I)Ljava/lang/String;") };
    const jmethodID method_getBlobByPos { ::djinni::jniGetMethodID(clazz.get(), "getBlobByPos", "(I)Lco/ledger/core/DatabaseBlob;") };
    const jmethodID method_getRowNumber { ::djinni::jniGetMethodID(clazz.get(), "getRowNumber", "()I") };
    const jmethodID method_available { ::djinni::jniGetMethodID(clazz.get(), "available", "()I") };
    const jmethodID method_hasNext { ::djinni::jniGetMethodID(clazz.get(), "hasNext", "()Z") };
    const jmethodID method_next { ::djinni::jniGetMethodID(clazz.get(), "next", "()Lco/ledger/core/DatabaseResultSet;") };
    const jmethodID method_close { ::djinni::jniGetMethodID(clazz.get(), "close", "()V") };
    const jmethodID method_getError { ::djinni::jniGetMethodID(clazz.get(), "getError", "()Lco/ledger/core/DatabaseError;") };
};

}  // namespace djinni_generated
#endif //DJINNI_GENERATED_DATABASERESULTSET_HPP_JNI_
