// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "DatabaseStatement.hpp"  // my header
#include "DatabaseBlob.hpp"
#include "DatabaseColumn.hpp"
#include "DatabaseResultSet.hpp"
#include "DatabaseRowId.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

DatabaseStatement::DatabaseStatement() : ::djinni::JniInterface<::ledger::core::api::DatabaseStatement, DatabaseStatement>() {}

DatabaseStatement::~DatabaseStatement() = default;

DatabaseStatement::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

DatabaseStatement::JavaProxy::~JavaProxy() = default;

void DatabaseStatement::JavaProxy::bindShort(int32_t c_pos, int16_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindShort,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindInt(int32_t c_pos, int32_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindInt,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindLong(int32_t c_pos, int64_t c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindLong,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindFloat(int32_t c_pos, float c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindFloat,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindDouble(int32_t c_pos, double c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindDouble,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindString(int32_t c_pos, const std::string & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindString,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindBlob(int32_t c_pos, const std::shared_ptr<::ledger::core::api::DatabaseBlob> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindBlob,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni_generated::DatabaseBlob::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindRowId(int32_t c_pos, const std::shared_ptr<::ledger::core::api::DatabaseRowId> & c_value) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindRowId,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)),
                           ::djinni::get(::djinni_generated::DatabaseRowId::fromCpp(jniEnv, c_value)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::bindNull(int32_t c_pos) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindNull,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_pos)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::shared_ptr<::ledger::core::api::DatabaseColumn> DatabaseStatement::JavaProxy::describeColumn(int32_t c_colNum) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_describeColumn,
                                         ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_colNum)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::DatabaseColumn::toCpp(jniEnv, jret);
}
int32_t DatabaseStatement::JavaProxy::getColumnCount() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getColumnCount);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
std::shared_ptr<::ledger::core::api::DatabaseResultSet> DatabaseStatement::JavaProxy::execute() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_execute);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::DatabaseResultSet::toCpp(jniEnv, jret);
}
void DatabaseStatement::JavaProxy::reset() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_reset);
    ::djinni::jniExceptionCheck(jniEnv);
}
void DatabaseStatement::JavaProxy::close() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::DatabaseStatement>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_close);
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
