
DatabaseError = interface +j +n +o {
    getMessage(): string;
}

DatabaseBlob = interface +j +n +o {
    read(): binary;
}

DatabaseResultSet = interface +j +n +o {
    getShortByName(name: string): i16;
    getIntByName(name: string): i32;
    getFloatByName(name: string): f32;
    getDoubleByName(name: string): f64;
    getLongByName(name: string): i64;
    getStringByName(name: string): string;

    isNullAtPos(pos: i32): bool;
    isNullForName(name: string): bool;

    getColumnName(pos: i32): string;

    getShortByPos(pos: i32): i16;
    getIntByPos(pos: i32): i32;
    getFloatByPos(pos: i32): f32;
    getDoubleByPos(pos: i32): f64;
    getLongByPos(pos: i32): i64;
    getStringByPos(pos: i32): string;
    getBlobByPos(pos: i32): DatabaseBlob;

    getRowNumber(): i32;
    available(): i32;
    hasNext(): bool;
    next(): DatabaseResultSet;
    close();
    getError(): DatabaseError;
}

DatabaseStatement = interface +j +n +o {
    bindShort(pos: i32, value: i16);
    bindInt(pos: i32, value: i32);
    bindLong(pos: i32, value: i64);
    bindFloat(pos: i32, value: f32);
    bindDouble(pos: i32, value: f64);
    bindString(pos: i32, value: string);
    bindBinary(pos: i32, value: binary);
    execute(): DatabaseResultSet;
}

DatabaseTransaction = interface +j +n +o {
    prepareStatement(query: string);
    commit();
    rollback();
}

DatabaseConnection = interface +j +n +o {
    prepareStatement(query: string);
    newTransaction(): DatabaseTransaction;
    commit();
    close();
}

DatabaseConnectionPool = interface +j +n +o {
    getConnection(): DatabaseConnection;
    getPoolSize(): i32;
}

# An interface to implement a custom SQL backend
DatabaseEngine = interface +j +n +o {
    connect(connectUrl: string): DatabaseConnectionPool;
}

#Class representing a database
DatabaseBackend = interface +c {
    getConnectionPoolSize(): i32;
    enableQueryLogging(enable: bool): DatabaseBackend;
    isLoggingEnabled(): bool;
    #Create an instance of SQLite3 database
    #@return DatabaseBackend object
    static getSqlite3Backend(): DatabaseBackend;
    #Create an instance of PostgreSQL database
    static createBackendFromEngine(engine: DatabaseEngine): DatabaseBackend;
}
