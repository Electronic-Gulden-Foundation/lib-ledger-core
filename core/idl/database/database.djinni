DatabaseValueType = enum {
      string; date; double; integer; long_long; unsigned_long_long;
}


DatabaseError = interface +j +n +o {
    getMessage(): string;
}

DatabaseBlob = interface +j +n +o {
    read(offset: i64, length: i64): binary;
    write(offset: i64, data: binary): i64;
    append(data: binary): i64;
    trim(newLen: i64): i64;
    size(): i64;
}

DatabaseColumn = interface +j +n +o {
  getType(): DatabaseValueType;
  getName(): string;
}

DatabaseResultRow = interface +j +n +o {
    isNullAtPos(pos: i32): bool;
    getColumnName(pos: i32): string;
    getShortByPos(pos: i32): i16;
    getIntByPos(pos: i32): i32;
    getFloatByPos(pos: i32): f32;
    getDoubleByPos(pos: i32): f64;
    getLongByPos(pos: i32): i64;
    getStringByPos(pos: i32): string;
    getBlobByPos(pos: i32): DatabaseBlob;
}

DatabaseResultSet = interface +j +n +o {
    getRow(): DatabaseResultRow;

    # Get the number of rows updated by the query (UPDATE, INSERT, DELETE...)
    getUpdateCount(): i32;
    # Get the number of row retrieved
    getRowNumber(): i32;
    available(): i32;
    hasNext(): bool;
    next(): DatabaseResultSet;
    close();
    # Get the last error that occured on the database.
    getError(): DatabaseError;

}

DatabaseRowId = interface +j +n +o {

}

DatabaseStatement = interface +j +n +o {
    bindShort(pos: i32, value: i16);
    bindInt(pos: i32, value: i32);
    bindLong(pos: i32, value: i64);
    bindFloat(pos: i32, value: f32);
    bindDouble(pos: i32, value: f64);
    bindString(pos: i32, value: string);
    bindBlob(pos: i32, value: DatabaseBlob);
    bindRowId(pos: i32, value: DatabaseRowId);
    bindNull(pos: i32);

    bindShortByName(name: string, value: i16);
    bindIntByName(name: string, value: i32);
    bindLongByName(name: string, value: i64);
    bindFloatByName(name: string, value: f32);
    bindDoubleByName(name: string, value: f64);
    bindStringByName(name: string, value: string);
    bindBlobByName(name: string, value: DatabaseBlob);
    bindRowIdByName(name: string, value: DatabaseRowId);
    bindNullByName(name: string);

    describeColumn(colNum: i32): DatabaseColumn;
    getColumnCount(): i32;
    execute(): DatabaseResultSet;

    reset();
    close();
}

DatabaseConnection = interface +j +n +o {
    prepareStatement(query: string, repeatable: bool): DatabaseStatement;
    begin();
    rollback();
    commit();
    close();
    newBlob(): DatabaseBlob;
    newRowId(): DatabaseRowId;
}

DatabaseConnectionPool = interface +j +n +o {
    getConnection(): DatabaseConnection;
}

# An interface to implement a custom SQL backend
DatabaseEngine = interface +j +n +o {
    connect(connectUrl: string): DatabaseConnectionPool;
    getPoolSize(): i32;
}

#Class representing a database
DatabaseBackend = interface +c {
    getConnectionPoolSize(): i32;
    enableQueryLogging(enable: bool): DatabaseBackend;
    isLoggingEnabled(): bool;
    #Create an instance of SQLite3 database
    #@return DatabaseBackend object
    static getSqlite3Backend(): DatabaseBackend;
    #Create an instance of PostgreSQL database
    static createBackendFromEngine(engine: DatabaseEngine): DatabaseBackend;
}
